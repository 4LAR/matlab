инистерство образования и науки оссийской едерацииедеральное государственное бюджетное образовательное учреждение высшего профессионального образованияермский национальный исследовательский политехнический университет .. ольдштейн     твержденоедакционно-издательским советом университетав качестве учебного пособияздательство ермского национального исследовательскогополитехнического университета2015 2  004.422.8:519.873(075.8 63 ецензенты: д-р физ.-мат. наук, директор по корпоративному обучениюи научной деятельности .. умянцев( арма-елеком д-р техн. наук, профессор .. ижняков(ермский национальный исследовательскийполитехнический университетольдштейн, .. 63 птимизация в среде : учеб. пособие  .. ольдштейн.  ермь: зд-во ерм. нац. исслед. политехн. ун-та, 2015.  192 с.  978-5-398-01361-0 ассмотрены возможности системы компьютерной математики в части решения оптимизационных задач. остаточно подробно описаны функции пакетов расширения   и  . риведены многочисленные примеры решения задач оптимизации в режиме командной строки, иллюстрированные двумерными и трехмерными графиками, а также задания для восьми лабораторных работ. редназначено для студентов (бакалавров и магистров, изучающих курс етоды оптимизации. акже может быть полезно тем, ктосталкивается с необходимостью решать задачи оптимизации.  004.422.8:519.873(075.8  978-5-398-01361-0  , 2015 3 ведение........................................................................................................ 5 1. дномерная минимизация в .................................................. 7 2. езусловная минимизация функций многихпеременных................................................................................................. 11 2.1. ункция  ............................................................................. 11 2.2. ункция ......................................................................... 17 абораторная работа  1. дномерная и безусловнаяоптимизация............................................................................................ 20 3. словная оптимизация .......................................................................... 21 абораторная работа  2. словная оптимизация............................. 40 4. лобальная оптимизация....................................................................... 41 4.1. етод  ......................................................................... 41 4.2. етод ............................................................................... 50 абораторная работа  3. сследование методов  и  .............................................................................................. 69 4.3. етод   ......................................................................... 70 4.4. етод   ............................................................. 87 абораторная работа  4. сследование методовпрямого поиска и отжига....................................................................... 98 4.5.   .................................................................... 100 4.6. равнительная характеристика решателей................................. 116 абораторная работа  5. енетический алгоритм.......................... 117 5. ногокритериальная оптимизация .................................................... 119 5.1. ункция  ....................................................................... 119 5.2. етод достижения цели. ункция  ............................ 128 5.3. ункция  ......................................................................... 135 абораторная работа  6. ешение многокритериальныхзадач....................................................................................................... 137 6. инейное программирование. ункция ................................ 139 7. елочисленное программирование. ункция  ................... 148 4 8. вадратичное программирование. ункция ..................... 152 абораторная работа  7. ешение задач математическогопрограммирования ............................................................................... 157 9. ругие функции пакета  ................................... 159 9.1. ахождение корней функции одной переменной...................... 159 9.2. ешение системы нелинейных уравнений.................................. 160 9.3. елинейная задача наименьших квадратов................................ 164 9.4. адача аппроксимации.................................................................. 166 9.5. еотрицательный линейный методнаименьших квадратов ........................................................................ 168 9.6. инейная задача наименьших квадратовс ограничениями................................................................................... 170 абораторная работа  8. ешение уравненийи метод наименьших квадратов ......................................................... 172 писок рекомендуемой литературы....................................................... 174 риложение 1. араметры ........................................................ 175 риложение 2. араметры ........................................................ 177 риложение 3. араметры  и ........................... 180 риложение 4. араметры   ............................................... 182 риложение 5. араметры   ................................... 184 риложение 6. араметры   ( и ........................................................................................ 185 риложение 7. араметры  и  ................................ 187 риложение 8. араметры ...................................................... 189 риложение 9. араметры  ........................................................... 190 5  (   одна из наиболее мощных систем компьютерной математики, построенная на расширенном применении матричных вычислений. на включает пакеты расширения,  и , ориентированные на самые разнообразные задачи, где требуются математические расчеты, глубокий анализ имоделирование.  имеет развитый высокоуровневый язык программирования и прекрасную двумерную и трехмерную графику, позволяющуюнаглядно представлять результаты расчетов, экспериментов и процессы моделирования. акеты расширения  (ящик инструментов специализируются на решении задач в различных предметных областях: в физикеи астрономии, в специальных разделах математики и математическоммоделировании, в проектировании и управлении технических системи т.д. сновным инструментом  являются функции, которыереализуют определенные операции и алгоритмы. меются встроенныефункции, в том числе все элементарные, и внешние, оформленные ввиде так называемых -файлов. нешние функции могут пополнятьсясобственными функциями пользователя.  расширения  входят два пакета, предназначенные длярешения задач оптимизации:   и   . астоящее пособие посвящено описаниюэтих пакетов. ервый пакет включает набор функций, в которых реализованыметоды и алгоритмы одномерной и многомерной безусловной и условной минимизации, линейного, булевого и квадратичного программирования, наименьших квадратов и решения уравнений, а также алгоритмы многокритериальной оптимизации. ункции пакета   ориентированы на поискглобального минимума или многих минимумов. десь используютсяметоды прямого поиска, мультистарта, моделирования отжига, генетический алгоритм.  этот пакет также включена функция многокритериального генетического алгоритма. акеты предлагают два способа решения задач: с использованиемкомандной строки и с использованием графического пользовательско-6 го интерфейса (. торой способ проще, но уступает первомув гибкости и функциональности. ежим командной строки предоставляет пользователю всю мощь системы , поэтому в пособииописывается использование именно этого режима решения задач. риумении решать задачи в командном окне использование  не вызовет никаких затруднений (для обращения к нему в меню соответствующего  следует выбрать . , включая рассматриваемые пакеты, имеет мощную иудобную систему помощи, содержащую многие тысячи страниц документации. ля быстрого доступа к интересующему объекту достаточнонабрать  и имя объекта, например оператора или функции.  пособии рассматриваются функции обоих пакетов, приводятсямногочисленные примеры их использования, во многих случаях онисопровождаются наглядным графическим представлением результатов. ля практического освоения и использования методов оптимизации, реализованных в пакетах, предлагается выполнить восемь лабораторных работ, охватывающих большинство функций пакетов. ля тех, кто не работал с , обратим внимание на два варианта некоторых арифметических операторов: традиционный оператор (, , , определяющий матричную операцию, и оператор с точкойвпереди (., ., ., задающий поэлементные действия с операндами. 7 1.       содержит специальные функции, каждаяиз которых ориентирована на определенный тип задачи оптимизации. ля одномерной минимизации непрерывных функций предназначенафункция пакета . ешаемая задача имеет вид (,     . лгоритм минимизации базируется на методах золотого сечения иквадратичной аппроксимации (параболической интерполяции. арианты обращения к функции :  (,1,2   (,1,2,   ( ,  (... ,,  (... ,,,  (...лева от знака равенства записываются выходные величины, и если их больше одной, то они перечисляются через запятую в квадратных скобках. права от имени функции в круглых скобках указываются входные величины (аргументы функции.  приведенных записяхприняты следующие обозначения:   значение , соответствующее локальному минимуму функции (;   значение ( в точке найденного локального минимума;   признак, идентифицирующий причину завершения алгоритма, его возможные значения: 1  сходимость алгоритма к минимуму; 0  число итераций превысило максимально установленное; 1  причина в функции вывода (решение не достигнуто; 2  границы несовместны.   структура, содержащая информацию о процессе, имеет поля:   число итераций;   число вычислений целевой функции;   используемый алгоритм;   конечное сообщение. 8 ходные аргументы:   целевая функция, может быть определена как -файл (-функция, например:    (   (2; (файл сохраняется под именем ., и тогда на месте  записывается , где   имя функции и соответствующего ей-файла; также  можно представить непосредственно формулой(без использования имени как конструкцию ((2 или какстроковое выражение (2; 1,2  значения левой и правой границ переменной ;   опции алгоритма, исходно все установлены по умолчанию; применяетя, если необходимо изменить какие-либо параметры оптимизации; при этом перед обращением к функции  вносятсяизменения в настройки опций  с помощью функции , аргументами которой являются пары имя параметра, устанавливаемое значение параметра, например установка(,  исключит вывод на экран (в командное окно промежуточных данных. ри значении  будут выводиться результаты каждой итерации. ругие значения параметра   и  (вывод итогов ивывод только при отсутствии сходимости. казание параметра , в качестве значения которого записывается имя функции, приводит к вызову этой функции на каждой итерации алгоритма. начение параметра  определяет функцию вывода графики.  пакете это функции  (рисует текущую точку, (выводит количество вычислений функции, (выводит текущее значение целевой функции. ункции вывода и графики могут быть написаны пользователем. ривключении параметра  ( выводится сообщение привозврате целевой функцией комплексного значения или  и .   сохраненное из    описание задачи, а именно:   целевая функция, 1  левая граница, 2  правая граница, 9   ,   структура параметров, создается . езультатом выполнения функции  является локальноерешение (локальный минимум. ример 1. айти минимум функции     25 в интервале 2    9. ля решения задачи в командное окно записываем программу:  2:0.1:9;25.; (,;(; (;... (  ; ; ... (, ;... ,,,(25.,2,9, римечание. ноготочие позволяет перейти на следующую строку, иначе при нажатии  выполнится введенная перед ним частьпрограммы. акже многоточие позволяет разрывать выражение дляпереноса на следующую строку. ояснения к программе: в 1-й строке выводится график функции иобозначения осей, во 2-й выводится заголовок и дается указание наудержание графического окна, в 3-й функция  во время работыалгоритма выводит точки, соответствующие итерациям, в то же графическое окно. та функция записана в виде -файла   (,,   ;              25.;  (,,.;       .  (,.15,2(.1;          езультаты выполнения программы, выводимые в командное играфическое окна, представлены ниже и на рис. 1. 10 ис. 1. оиск минимума одномерной функции   5.0000    10.0000    1   : 9 : 10 :   ,   : 1112  11 2.    ля поиска минимума нелинейной функции многих переменныхпри отсутствии ограничений можно использовать функции или  из пакета  . ассмотрим каждую из них в отдельности. редварительно заметим, что в  принято разделять алгоритмы оптимизации на алгоритмы для задач большой (  и средней размерности ( , причем это сделано довольноусловно. сновное отличие в том, что   учитывает разреженность матрицы и для ее хранения и операций с ней использует алгебру разреженных матриц. лгоритмы   имеют дело сполными матрицами и оперируют соответствующей алгеброй. рибольшой размерности задачи это требует много памяти и времени. екомендуется сначала выбирать  , так как эти алгоритмыимеют более широкие функциональные возможности. 2.1. ункция о умолчанию функция  настроена на алгоритм  . н базируется на методе доверительных областей ( , т.е. последовательной аппроксимации целевойфункции в окрестности текущей точки более простой функцией, по которой находят следующее приближение к минимуму исходной функции. лгоритм   требует задания градиента целевойфункции, иначе  будет использовать  . тобыявно указать  , следует в качестве аргумента функции записать ,.  алгоритме   можно выбрать один из трех методов: квази-ньютоновкий метод  (ройдена  летчера  олдфарба  энно или  (эвидона  летчера  ауэлла и метод наискорейшего спуска (  . о умолчанию используетсяметод , а для указания другого метода в опции нужно добавитьпараметр  со значением  или . ольшинство параметров являются общими для   и , но часть присуща только одному из них. се параметры с краткими пояснениями и значениями по умолчанию приведены вприл. 1. 12 арианты обращения к функции :   (,0   (,0,   ( ,  (... ,,  (... ,,,  (... ,,,,  (... ,,,,, (... мысл обозначений выходных аргументов:  и   вектор значений искомых переменных и значение целевой функции;   указывает причину завершения алгоритма, можетпринимать следующие значения: 1  величина градиента меньше заданной точности , 2  изменения  меньше заданной точности , 3  изменения  меньше заданной точности , 5  предсказанное уменьшение  меньше чем , 0  превышено максимальное число итераций или число вычислений , 1  алгоритм завершен функцией вывода (решение не получено;   градиент целевой функции;   гессиан целевой функции;   структура, содержащая информацию о процессе в следующих полях:   число итераций,   значение целевой функции,   условие оптимальности 1-го порядка,  использованный алгоритм,   общее число итераций (для алгоритма большойразмерности,   заключительное смещение по  (для алгоритмовсредней размерности,  сообщение о завершении.13 ходные аргументы:   либо только целевая функция, либо функция, возвращающая значения целевой функции и ее градиента, либо функция, возвращающая значения целевой функции, ее градиента и гессиана; в первомслучае она может задаваться, как показано в гл. 1, а во втором случае  -файлом с двумя выходными аргументами  и , причем градиент   векторный аргумент (элементы разделяются точкой с запятой. ример:  ,  1(   2(12(2(1(23;  4(1(2;(13(22; в третьем случае  также -файлом с тремя выходными аргументами:  ,,  2(   ...;   ...;   ...;, где   матрица вторых производных целевой функции. тобы аналитические выражения градиента и гессиана использовались в алгоритме, их необходимо включить в :(, или (,,,.  противном случае они будут вычисляться приближенно через конечные разности; 0  начальная точка, задается пользователем;   используется для внесения изменений в настройки параметров процесса;   задает задачу указанием  целевая функция, 0  начальная точка,     настройки параметров.ледует иметь в виду, что в  выходные аргументы, как ивходные, могут указываться только в том порядке, который предписансинтаксисом обращения к функции минимизации. ак, например, приобращении к  недопустима запись,,  (... из-за пропуска аргумента . 14 ример 2. айти минимум функции озенброка(100( 2   21  2  ( 1  12. та функция часто используется в качестве тестовой при сравнении эффективности разных алгоритмов, так как имеет сильно выраженную овражную структуру. на достигает минимума в точке (1; 1. рограмму запишем в виде функции  с вложеннойфункцией , обеспечивающей вывод  и  на каждой итерации:    (0        .  ; .  ;      (,,... ,,,; ,,,(,0,; (;(;(;(; (; ,(-4:0.05:4;(,;,... (,,,5 12 70 120 200 300 450 600 800,; (,,70 300 600,,7;  .(:,1;.(:,2;   ;(,,.,,,-;  (1;(2;  (0(1-0.1,0(20.2,0;  (    ;     (,,    ;                         .        . ..;  .;  .  .; ;      15  этой программе функция озенброка представлена в двух вариантах: как входной аргумент  и для вырисовки ее контуров(линий уровня. м соответствуют -файлы  и ,приводимые ниже.   ( 100((2-(122((1-12;     (, 100(-.2.2(-1.2;  римечание. о втором варианте записи функции возведению встепень предшествует точка, что означает поэлементное действие, иначе  будет выполнять матричную операцию и выдастошибку. еперь для выполнения программы достаточно ввести в командное окно начальную точку и обращение к программе:  01 -3;   (0 и нажать ввод. онечные результаты выводятся в командное окно, алинии уровня и траектория поиска  в графическое окно (рис. 2. исленные результаты выполнения программы:   0.9999 0.9998   8.3148-009   : 28 число итераций : 105 число вычислений функции : 1 размер шага : 2.4548-004 оптимальность первого порядка : -: -    : 1438     : 292   : 291  16 ис. 2. раектория поиска минимума методом  ак следует из отчета, функция  по умолчанию использовала квазиньютоновский линейный алгоритм поиска минимума. ис. 3. ример застревания поискаметодом наискорейшего спуска17 сли в аргументы  добавить параметр со значением , т.е. в качестве метода минимизации указать наискорейший спуск, то поиск из начальной точки (2 2 застрянетвдали от минимума (рис. 3. н также не достигнет минимума и източки (1 3. ричиной такого поведения метода является сильная овражность данной целевой функции. 2.2. ункция  функции  для нахождения минимума используетсясимплексный метод прямого поиска елдера  ида. зменение параметров производится посредством функции . араметры , , , , , ,  и  идентичны одноименнымпараметрам для функции . тличие только в меньшем числефункций графики: из перечисленных для  в (см. прил. 1 используются первые три. бращение к функции возможно в следующих вариантах:   (,0   (,0,   ( ,  (... ,,  (... ,,,  (... мысл входных и выходных аргументов такой же, как в функции. тличие в следующем.  может содержать только целевую функцию, и, соответственно, в выходных аргументах нет  и, а  может принимать только следующие значения: 1  получено решение в результате сходимости процесса, 0  число итераций превысило допустимое значение, 1  процесс остановлен функцией вывода (  . ример 3. айти минимум функции озенброка(  100( 2   21  2  ( 1  12с помощью . 18 апишем программу, как и в п. 2.1, в виде функции   (0, описание которой совпадает с приведенным для функции , в нем заменяется только  на .  командную строку заносим01 3;  (0, нажимаем  и получаем результаты в численном и графическомвиде (рис. 4. ис. 4. раектория поиска минимума методом елдера  ида  1.0000 1.0000   3.1666-010   : 56  : 105  : -     : 1196  19 равнивая результаты поиска  и  из однойначальной точки (1 3, видим, что во втором случае потребовалось вдва раза больше итераций, но число вычислений функции оказалосьодинаковым. сли начать поиск с точки (2 2  0-2 2;  (0, то получим следующие результаты:   1.0000 1.0000   3.9243-010   : 112  : 208  : -     : 1196  ис. 5. оиск методом елдера  ида из точки (2 2 ак видно из отчета и рис. 5, симплексный метод в отличие от метода наискорейшего спуска сходится к минимуму с высокой точностью. 20 абораторная работа  1 дномерная и безусловная оптимизацияадания: 1. знакомиться с возможностями функций   для решения задач одномерной и безусловной многомерной минимизации и с методами, заложенными в них. 2. оспроизвести пример 1, повторить с заменой числа 25 на 38; найти минимум этой же целевой функции без использования графики. 3. айти минимум функции   ((  ( на интервале(0,5, 3 без графики и с графикой. 4. оспроизвести пример 2. овторить для разных начальных точек, одна из которых (2 2. 5. а функции озенброка исследовать поведение метода наискорейшего спуска при разных начальных точках. 6. ля функции озенброка применить метод , используя несколько начальных точек. 7. оспроизвести пример 3 и исследовать поведение метода елдера  ида при разных начальных точках. 8. айти максимум функции 22 221 110 . 30(  5(1,5  1      9. делать выводы по применимости исследованных алгоритмовоптимизации. 21 3.  ля поиска минимума функции многих переменных при наличииограничений предназначена функция  из пакета . актически с помощью этой функции можно решать задачи нелинейного математического программирования ( в самой общей постановке.  обозначениях  задача  ставится так:  ( при условиях(  0, (  0,   ,   ,     , где   вектор переменных: ( и (  вектор-функции левых частей нелинейных неравенств и равенств;  и   матрицы условий линейных неравенств и равенств;  и   векторы свободных членов(правых частей линейных неравенств и равенств;  и   векторынижних и верхних границ на переменные. чевидно, что в частных постановках задач  некоторые из представленных условий могутотсутствовать.  связи с многообразием задач  функция  реализуетне один, а четыре метода условной минимизации. ассмотрим краткоэти методы. етод доверительных областей ( . оверительной областью названа окрестность  текущей точки поиска, размерыкоторой могут изменяться в зависимости от поведения целевой функции.  этой области целевая функция ( аппроксимируется болеепростой функцией (, затем решается подзадача, заключающаяся впоиске минимума функции ( на , в результате находится пробныйшаг . сли окажется, что (    (, текущая точка изменяется истановится равной   , в ином случае текущая точка не изменяется, доверительная область уменьшается и заново решается подзадача (находится новый пробный шаг.  стандартном методе доверительных областей используется квадратичная аппроксимация, определяемая членами только первого и второго порядка ряда ейлора для (, а в качестве   сфера или эллипсо-22 ид. ля нахождения минимума квадратичной функции (решения подзадачи существуют хорошие алгоритмы (ньютоновские и др., однако прибольшой размерности они требуют слишком много времени. оэтомуподход, примененный в  , состоит в ограничении подзадачи двумерным подпространством . чевидно, что в такомслучае решение подзадачи становится тривиальным. ешатель определяет  как линейное пространство, натянутое на векторы 1 и 2, где 1  направление градиента  аппроксимируемой функции, а 2  направление, определяемое или как приближенное направление ьютона из решения линейной системы2     ,в которой   матрица ессе, или как направление отрицательной кривизны поверхности целевой функции из неравенства2 2 0.    первом случае решение системы равенств находится предобусловленным методом сопряженных градиентов  (   . аким образом, при решении задачи без ограничений основнымишагами алгоритма будут: 1 формулировка двумерной подзадачи доверительной области; 2 решение подзадачи и определение ; 3 если (    (, тогда     ; 4 корректировка доверительной области. аги повторяются до установления сходимости. адача усложняется при наличии ограничений. сли ограничения описываются линейной системой равенств, метод на каждой итерации генерирует допустимое решение. ля получения допустимой начальной точки применяется шаг метода наименьших квадратов, на последующих шагахлинейные системы решаются упрощенным методом сопряженных градиентов ( заменен на  . ри двухсторонних ограничениях на переменные также генерируются только строго допустимыерешения, для чего используются соответствующие необходимые условия уна  аккера. етод доверительных областей эффективен для решения большихразреженных задач или средних плотных задач с двухсторонними ограничениями на переменные или только с линейными ограничениями. лгоритм требует задания градиента целевой функции и указания наего включение в . 23 етод активного набора ( . егодня методы, основанные на решении уравнений аруша  уна  аккера (, считают более эффективными, чем методы типа штрафных функций. лязадач выпуклого  условия  являются одновременно необходимыми и достаточными для точки глобального решения. ля общей задачи , представляемой как ( (  0,   1, ..., , (  0,     1, ..., , условия уна  аккера записываются в следующем виде:  (  (  0,(  0, 1, ,0, 1, .             ервое уравнение описывает взаимосвязь градиента целевой функциис градиентами активных ограничений: первый уравновешивается градиентами ограничений с весами   множителями агранжа. ножители неактивных ограничений равны нулю, что выражается вторымуравнением; положительными могут быть только множители активныхограничений. ешение уравнений  составляет основу многих алгоритмов нелинейного программирования. спользуемые для их решения квазиньютоновские методы с процедурой обновления обеспечивают сверхлинейную скорость сходимости. сновная идея метода активного набора состоит в квадратичной аппроксимации функции агранжа.  такомварианте метод часто упоминается как последовательное квадратичноепрограммирование (. а каждой итерации методом квадратичногопрограммирования решается квадратичная подзадача, определяющая направление спуска, а шаг в этом направлении находится методом линейного поиска минимума штрафной функции. ля обновления матрицы, аппроксимирующей гессиан функции агранжа, и обеспечения ее положительной определенности применяется метод . 24 лгоритм активного набора не предназначен для больших задач. нэффективен для некоторых задач средней размерности с негладкими ограничениями. ля повышения скорости он может делать большие шаги. лгоритм последовательного квадратичного программирования. н подобен методу активного набора, однако имеет важные отличия. о-первых,  соблюдает строгую допустимость относительно заданных границ. а каждой итерации делается шаг в области, определяемойграницами.  завершающие изменения шагов также соблюдают границы. ри нестрогих границах может быть сделан шаг точно на границу. акая строгая допустимость выгодна, когда целевая функция или функции нелинейных ограничений неопределенны или сложны вне границ. о-вторых, алгоритм обеспечивает робастность движения: при неудачном шаге, когда функция или функции задачи оказываются неопределенными (они возвращают значения , , алгоритм пытаетсяуменьшить шаг. -третьих,  отличается от алгоритма  использованием более эффективных программ линейной алгебры, которые вызываются при решении квадратичной подзадачи. аконец, в реализованы два новых подхода к решению подзадачи квадратичногопрограммирования в случае невыполнения ограничений. лгоритм использует функцию качества, которая образуется комбинацией целевойфункции и ограничений. инимизация функции качества приводит кдопустимому решению, однако из-за увеличения числа переменных может замедлиться решение подзадачи. торой подход к устранению нарушения ограничений связан с квадратичной аппроксимацией функцийограничений. н также позволяет достичь допустимого решения, нотребует большего числа вычислений функций ограничений, что приводит к замедлению процесса решения подзадачи квадратичного программирования. лгоритм  применяется для решения задач средней размерности. етод внутренней точки (-. уть метода заключается в решении последовательности аппроксимирующих задач. ля общей задачи   (    при условиях  (  0, (  0  25 аппроксимирующая задача для каждого   0 имеет вид,  ( ,        , ( (  (         при условиях   (  0, (  0.   аждому ограничению-неравенству исходной задачи соответствует положительная переменная  в аппроксимирующей задаче. ристремлении  к нулю минимум  должен приближаться к минимуму . обавленный к целевой функции член называется барьерной функцией. ак видно, аппроксимирующая задача представляет собой последовательность задач с ограничениями-равенствами, и ее решение найтилегче, чем исходной задачи с неравенствами. а каждой итерации используется один из двух основных типовшагов: 1 прямой шаг в пространстве (,  для решения  уравненийаппроксимирующей задачи путем их линейной аппроксимации; такойшаг называется шагом ьютона; 2 -шаг (   сопряженный градиент с использованием доверительной области. о умолчанию сначала делается попытка выполнить прямой шаг. сли он невозможен, алгоритм пытается сделать -шаг. еудача прямого шага может быть обусловлена локальной невыпуклостью решаемой задачи вблизи текущей точки. а каждой итерации алгоритмуменьшает функцию качества, например такую, как(,  ((, (. араметр  может увеличиваться по ходу итераций для продвижениярешения к допустимой области. сли предпринятый шаг не уменьшаетфункцию качества, алгоритм отклоняет его и пытается сделать новыйшаг. сли в точке  функции возвращают комплексное значение, ,  или ошибку,  отвергается (как в случае недостаточного уменьшения функции качества и делается другой, более короткий шаг.  начальной точке подобное недопустимо. етод внутренней точки применяется для решения задач какбольшой, так и средней размерности. сли в опциях не указан конкретный алгоритм и применение алгоритма по умолчанию, т.е.  26 , к решаемой задаче невозможно, программа обращается к алгоритму внутренней точки. роцесс оптимизации определяется не только выбранным алгоритмом, но и значениями параметров. зменение параметров осуществляется с помощью функции . асть параметров относитсяко всем алгоритмам, и каждый алгоритм имеет еще свои индивидуальные параметры. се параметры  и их описание приведены вприл. 2. дним из существенных параметров является , устанавливающий способ вычисления гессиана. се алгоритмы, исключая, используют гессиан функции агранжа22 2 2 ( ,  (  (  ( .                    лгоритмы вычисляют гессиан по-разному. лгоритм  не использует пользовательский гессиан, а вычисляет его методом квазиньютоновской аппроксимации. лгоритм - может принимать гессиан, заданный пользователем. оскольку этот алгоритм не предназначен для нелинейных ограничений, гессиан функции агранжа совпадает с гессианом целевой функции иописывается вместе с ней. лгоритм - воспринимаетгессиан, заданный пользователем в виде отдельной функции, описаниекоторой имеет вид  (,  гессиан агранжа, где  квадратная матрица ,   множители агранжа, соответствующие нелинейным ограничениям. ользовательскаяфункция указывается в :   (,-,... ,.  алгоритме - можно выбрать способ вычисления гессиана из пяти вариантов, задаваемых как значение параметра:   посредством квазиньютоновской аппроксимации; ,  то же, но с ограниченной памятью на сохранение числа прошедших итераций (целое число;  то же, но память на 10 итераций; -- конечными разностями градиентов, при этом все градиенты задаютсяаналитически; - способ задает пользователь. 27 еперь рассмотрим способы использования функции , еевходные аргументы и возвращаемые величины (выходные аргументы. бращение к функции  записывается в одном из следующих возможных вариантов:   (,0,,   (,0,,,,   (,0,,,,,,   (,0,,,,,,,   (,0,,,,,,,,   ( ,  (... ,,  (... ,,,  (... ,,,,  (... ,,,,,  (... ,,,,,,  ... (...мысл большинства входных аргументов ясен из описания задачи и функции .  частности,  задается функцией, которая может возвращать значение как целевой функции, так и градиентаи гессиана, если это необходимо. тличие только в присутствии нового аргумента ,который представляет нелинейные условия задачи в виде -файла, например ,  (   ...;   ...;  этом случае в качестве  следует записать . сли равенств и неравенств больше одного, то  и  записываются как векторы. ри отсутствии равенств или неравенств в правой части соответствующего выражения записывается .   при записи матрицы (вектора элементы строки разделяются пробелом или запятой, астроки отделяются точкой с запятой или записываются в разных строках матрицы (вектора. ак, неравенства31 221 22 5,12    в -файле будут представлены в виде 2(13-(2-5;(1(22-12;. 28 сли нужно указать конкретный алгоритм, то в опции (в  записывается параметр  со значением  либо , либо -. о умолчанию применяетсяалгоритм -- и, если он не подходит (незадан градиент целевой функции или не соответствует тип ограничений, программа заменяет его на -. ыходные аргументы  отличаются от аргументов  значениями , структурой  и новым аргументом. начение  указывает на причину завершения алгоритма: а для всех алгоритмов1  мера оптимальности первого порядка стала меньше установленной в . и максимальное нарушение ограниченийменьше . (получено решение с заданной точностью,0  превышено максимальное число итераций (. или вычислений функции (., 1  алгоритм завершен функцией , 2  не найдено допустимой точки; б для алгоритмов доверительных областей и внутренней точки2  изменение в  меньше установленного в . имаксимальное нарушение ограничений меньше .(получено решение с заданной точностью; в только для алгоритма доверительных областей3  изменение целевой функции меньше . и максимальное нарушение ограничений меньше . (получено решение с заданной точностью; г только для алгоритма активного набора4  величина направления поиска меньше 2. имаксимальное нарушение ограничений меньше .(получено решение с заданной точностью, 5  величина производной по направлению прямого поиска меньше 2. и максимальное нарушение ограниченийменьше . (получено решение с заданной точностью; д только для алгоритма внутренней точки29 3  текущая точка  ниже величины .и максимальное нарушение ограничений меньше .(получено решение с заданной точностью. труктура  содержит поля , ,  (в алгоритме активного набора, ,  (оба в алгоритмах активного набора и внутренней точки, ,  (в алгоритмах доверительных областей ивнутренней точки, , . ояснения требуюттолько новые поля:   размер шага линейного поискаотносительно направления поиска,   максимальноезначение функций ограничений (величина нарушения ограничений.   структура, содержащая множители агранжа, отражающие влияние ограничений в оптимальном решении; состоит из полей, соответствующих определенным ограничениям:   нижняя граница (,   верхняя граница (,   линейные неравенства,   линейные равенства,   нелинейные неравенства,   нелинейные равенства. ассмотрим несколько примеров применения функции . ример 4. айти минимум функции(  4 21 12 (2  (2     при условиях31  2  8, 1  2  3. начала создадим -файлы с именами  и  длявычисления целевой функции в процессе минимизации и построенияконтуров:    ( (2-(14(2(1-(22;  30    (, (2-.4(2-.2;  ыпишем входные аргументы линейных ограничений: 31 8 , . 11 3            атем составим программу нахождения минимума и прорисовкилиний уровня, границ допустимой области и траектории поиска в видефункции 0.  качестве алгоритма укажем , а для получения точек траектории напишем функцию (укажем ее как значение параметра .    0(0          .  ;  .  ;     3 1;-1 1;8;3; ,(0:0.02:3.5,0:0.02:6;(,; ,(,,,0.007 0.025 0.1 0.5 2 5 10 15 ... 20 27 35 45,; (,,0.5 5 15 27,,7;  ;(83 1.25,0 4.25,-,,2.3; (0 1.25,3 4.25,-,,2; (1,1.8,  ; (1; (2; (0(1,0(20.2,0; (  ;   (,,,... ,,-; ,,,(,0,,,... ,,,,,  .(:,1;.(:,2;   ;(,,.,,,-; 31    (,,    ;                        .  .;... .;  .  .; ;      водим в командную строку 03 2;0(0 и получаем результаты в численном и графическом виде (рис. 6:    1.6049 3.1852    0.0250    1    : 13  : 43  : 0  : 5.6982-007  : -  : 4.0000-007  : 0  : 1782  32 ис. 6. оиск минимума алгоритмом внутренней точкити данные и рис. 6 показывают, что с заданной точностью достигнут локальный минимум на границе допустимой области в точке1  1,6049, 2  3,1852 и с оптимальным значением целевой функции0,025. аменив в  значение параметра    на , повторим поиск из той же начальной точки. анные, представленные ниже, и рис. 7 показывают, что алгоритмом  минимум находится значительно быстрее.  03 2;0(0    1.6049 3.1852    0.0250    1    : 5  : 21  :    33  : 1782   : 0  : 1  : 5.6766-007 ис. 7. оиск минимума методом последовательногоквадратичного программированияля точного вычисления градиента, используемого при минимизации, он задается аналитически в аргументе . ак, в рассмотренном выше примере функция  должна быть дополнена выражением градиента :  ,  ( (2-(14(2(1-(22; -4(2-(134(2(1-(2;-2(2(1-(2;  и в опции добавлен параметр  со значением .  следующем примере рассмотрим задачу с нелинейными ограничениями. 34 ример 5. айти минимум функции(  4 21 12 (2  (2     при условиях1,25(1 3,52 2  5, 1 12 0,75  1,5 2 0.     елинейные ограничения представим в -файле с именем :  ,  (    1.25((1-3.52(2-5;0.75(1(2-... 1.5(2(1; ;  нова составим программу минимизации и прорисовки линийуровня, границ допустимой области и траектории поиска в виде функции 00.    00(0 .  ; .  ; ,(0:0.02:3.5,0:0.02:6;(,; (,,, 0.007 0.025 0.1 0.5 2 5 10 15 20 27 ... 35 45,; 1.5:0.01:2.17; -1.25(-3.5.25;  ; (,,-,,2.3; 2.17:0.01:3.5; 1.5(2-0.75.; ;(,,... -,,2; (2.5,2,  ; (1; (2; (  ;   (,,,... , , ; ,,,(,0,,,... ,,,,, 35  .(:,1;.(:,2;   ;(,,.,,,-;    (,,    ;              .  .;... .;  .  .; ;      десь следует обратить внимание на входные аргументы функции. осле ввода и выполнения команды 00.5 4;  00(0 имеем нижеприведенные результаты и график траектории (рис. 8:    2.1661 2.7758    2.4229    1    : 5  : 24  :     : 1782   : 1.9114-012  : 1  : 6.5533-008 36 ис. 8. оиск условного минимума алгоритмом при нелинейных ограниченияхак видно из рис. 8, оптимальное решение достигается снова награнице допустимой области.  случае нелинейных ограничений помимо градиента целевойфункции могут быть заданы градиенты ограничений в -файле ограничений, и тогда для их использования необходимо добавить в опциипараметр  со значением .  приведенных примерах с  решались задачи с одноэкстремальными целевыми функциями. еперь рассмотрим пример поиска минимума многоэкстремальной функцией при двухсторонних ограничениях на переменные. ример 6. айти минимум функции  3(1 12 ( 21   (2  12 10(15  31   52   ( 21   21    13 ( (1  12  22   на параллелепипеде3    3,   1, 2. 37 ля решения этой задачи сначала запишем в -файл целевуюфункцию ( 3(1-(12(-(12-((212-10((15.... -(13-(25(-(12-(22-13(-((1... 12-(22;  атем составляем программу поиска минимума и отображения целевой функции, ее линий уровня и траектории поиска в виде функцииот начальной точки:    51(0 .  ; .  ;      ... (,,,,,... -; ,,, (,0,,,,... ,-3 -3,3 3,,  ,(-3:0.02:3;3(1-.2.(-.2- ... (1.2-10(5 ... -.3-.5.(-.2-.2-13(-(1.2-.2; (,,;  .(:,1;.(:,2;.;   ;3(,,,.,,,,-;  -10((; ;3(,,,-;  (1; (2;(;  (     ;     (,,    ;                      .  .; .;  .  .; ;      осле ввода и выполнения команды 01 1;   51(0 38 получаем   0.2283 -1.6255    -6.5511    1    : 16  : 56  : 0  : 4.8893-008  : -  : 1.2023-007  : 0  : 1782  а рис. 9 показан процесс поиска минимума. ак видно из представленных результатов, он оказался успешным. ис. 9. ид целевой функции и траектория движения к минимумуднако этот результат следует считать случайным, так как случайно выбрана данная начальная точка. 39 овторив поиск из другой начальной точки, получаем 0-0.5 3;   51(0    -2.9984 2.9976    3.2869-005    1    : 27  : 84  : 0  : 7.2753-004  : -  : 3.2032-007  : 0  : 1782  з показателей поиска (признака , критериев точности как будто следует, что получено решение задачи. а самом деле поискзавершился даже не в точке одного из локальных минимумов, что хорошо видно на рис. 10. ис. 10. оиск минимума из точки (0,5 3 40 римечание.    имеется функция, по функциональности аналогичная . на применимадля решения задач без ограничений и с линейными и нелинейными ограничениями.  ней также используются алгоритмы - и-. днако она требует установки самостоятельнойбиблиотеки , к которой происходит обращение при вызове. овышение надежности отыскания минимума многоэкстремальной функции требует применения методов глобального поиска. екоторые из них, включенные в , рассматриваются в следующемразделе. абораторная работа  2 словная оптимизацияадания1. знакомиться с вариантами обращения к функции , еевходными и выходными аргументами. 2. оспроизвести пример 4, исследовать работу трех алгоритмовиз разных начальных точек, принадлежащих и не принадлежащих допустимой области. 3. о же в условиях примера 5. роме того, повторить нахождениеминимума для одной начальной точки без использования графики. 4. айти минимум функции из примера 5 при условиях, включающих ограничения из примеров 4 и 5. 5. оспроизвести пример 6 и исследовать работу всех алгоритмов из нескольких начальных точек. айти максимум этой же целевой функции, используя разные алгоритмы. 6. ровести анализ результатов работы алгоритмов. 41 4.   последних версиях  появился специализированный пакет   , предназначенный для решениязадач глобальной оптимизации. н включает методы (глобальный поиск,  (мультистарт,  (генетический алгоритм,   (прямой поиск и   (моделирование отжига. тот пакет применим, когда функции цели или ограничения непрерывны или имеют разрывы, возможно стохастические, могут не иметь производных или включаютфункции моделирования или черного ящика с некоторыми неопределенными параметрами настройки. о ни один из методов пакета не содержит критериев, позволяющих сертифицировать найденное решениекак глобальное.  отличие от методов локальной оптимизации не все перечисленные методы поиска глобального минимума представлены соответствующими функциями.  некоторым из них обращение идет путем создания задачи ( с последующим исполнением специальнойкомандой. иже рассматриваются команды и функции, позволяющиеиспользовать вышеназванные методы. о сначала дается краткое описание соответствующего метода или алгоритма. 4.1. етод редполагается, что целевая функция и функции ограничений являются гладкими. лгоритм, реализующий метод , включает ряд последовательных шагов. а первом шаге запускаетсялокальный решатель  с заданной начальной точкой 0. слиполучена сходимость, то запоминаются начальная и конечная точки идостигнутое значение целевой функции, используемое в функции счета(  . ункция счета определяется как сумма значения целевой функции и произведения множителя на сумму нарушений ограничений в данной точке. сли точка допустимая, то значениефункции счета равно значению целевой функции. ачальное значениемножителя равно 1000, но в процессе поиска оно обновляется. а втором шаге генерируется множество пробных точек   потенциально стартовых точек. ля этого используется алгоритм ловера, подобный алгоритму случайного поиска (точки должны бытьрассеяны, их компоненты лежат в диапазоне 41, 41. алее вы-42 полняется стадия 1 ( 1: во всех пробных точках стадии 1 (ихчисло задается параметром  как часть вычисляется функция счета и выбирается лучшаяточка, из которой запускается , а все остальные точки удаляются из общего списка пробных точек. атем инициализируются области притяжения (бассейны, счетчики и порог. начение порога локального решателя ( первоначально равноминимуму их двух значений целевой функции в точках решений, полученных из начальной точки 0 и из лучшей пробной точки.  качестве начальных бассейнов принимаются две сферические области сцентрами в точках двух полученных  решений с радиусами, равными расстояниям от начальной точки до точки решения.  алгоритме используются два типа счетчиков, считающих число последовательно исследованных пробных точек: 1 оказавшихся в бассейне (длякаждого бассейна один такой счетчик; 2 у которых функция счетабольше порога. се счетчики первоначально равны 0. алее выполняется основной цикл алгоритма, в котором исследуются оставшиеся от первой стадии пробные точки, определяются стартовые и из них проводится локальный поиск. а стадии 2 ( 2 берется очередная пробная точка . сли она не лежит в существующих бассейнах, ее функция счета лучше порога и, возможно, она удовлетворяет установленным границам иили неравенствам, то из нее запускается  (запускать ли из всех точек или только удовлетворяющих ограничениям, определяет параметр . ри этом счетчики бассейнов и порога обнуляются, а множество решений обновляется. сли установлена сходимость поиска из точки , полученное решение  сравнивается со всеми уже имеющимися решениями по расстоянию между точками иили по разности значений целевых функций. сли они больше заданных величин, которые можноизменять параметрами  иили , то в множество решений добавляется новый элемент, иначе точка  считается эквивалентом ближайшей точки и может ее заменить прилучшем показателе сходимости (. ри сходимости поискаиз точки  порог устанавливается в значение функции счета этой точки, а радиус бассейна с центром  принимается равным максимуму изсуществующего радиуса и расстояния между  и . ри невыполнениив точке  приведенных выше условий локальный решатель не запускается и выполняются следующие действия. величивается значение43 счетчиков бассейнов, содержащих точку , и сбрасываются в нольсчетчики остальных бассейнов. ля каждого бассейна, счетчик которого равен принятому значению , уменьшается его радиусумножением на (1  . сли счетчик порога равен, порог увеличивается по следующей формуле: новыйпорог:порог  (1 (, а счетчик сбрасывается в 0. се используемые здесь параметры приведены в прил. 3. о каждым 200 пробным точкам выдается одна строкаотчета глобальных итераций. лгоритм завершает работу по истечении установленного значения времени или исчерпании пробных точек. езультатом являетсямножество решений , упорядоченное по значениям целевой функции. чевидно, что реализованный в алгоритмеподход является эвристическим. еперь остановимся на применении . началасоздается структура адача ( с помощью функции, для чего задаются целевая функция в виде-файла или анонимно, границы и функции нелинейных ограничений(при их наличии, стартовая точка , например, для трехмерной задачи так:  (3,1. роме того, если требуется задать параметры , отличающиесяот установленных по умолчанию значений, то используется (например, чтобы задать конкретный алгоритм .  качествеаргументов функции  сначала записываетсяимя решателя, затем параметры в виде пар имя, значение. ля указания ограничений используются имена, приведенные ниже. граничение мяижняя граница ерхняя граница атрица линейных неравенств ектор ограничения линейных неравенств атрица линейных равенств ектор ограничения линейных равенств ункция нелинейных ограничений 44 римечание. оскольку в  используется только, то при отсутствии ограничений следует добавить искусственное: .  -; риведем вариант создания задачи. апример, зададим конкретный алгоритм   (,-; определим целевую функцию с именем  и линейные неравенствас матрицей  и вектором . огда для создания адачи следует ввести (,0,,... ,,,,,,,; еперь можно удостовериться в правильности созданной задачизапуском решателя :      (; ля применения  принято создавать объект решателя ( , используемый в команде запуска . слипараметры глобального поиска, установленные по умолчанию, приемлемы, то объект решателя с именем  создается командой  ; сли же требуется изменить некоторые параметры, тогда они указываются как аргументы  в виде пар имя, значение, например  (,0.01,,2000;,где заданы значения для выявления идентичных решений (когда различия между ними в пределах 0,01 и максимально допустимое времярешения задачи. се параметры, присущие , приведены в прил. 3. араметры локального решателя можно изменять, как ираньше, через . апускается решение задачи командой  с аргументами  и: ,,,,  (, ак и в обращениях к функциям, возвращаемых глобальных аргументов здесь может быть задано меньше, например ,. ыход дает признак причины завершения глобального решателя: 2  найден по крайней мере один локальный минимум и некоторые запуски локального решателя привели к сходимости, 45 1  найден по крайней мере один локальный минимум и все запуски локального решателя привели к сходимости, 0  локальный минимум не найден, но локальный решатель вызывался не менее одного раза и превысил максимальное число итерацийили оценок функции, -1  запущенный локальный решатель остановлен функцией  или , -2  не найден допустимый локальный минимум, -5  исчерпан лимит времени , -8  решение не найдено, все запуски локального решателя завершились с   -2, -10  ошибки в функциях, определенных пользователем. лобальная структура  содержит количество вычисленийцелевой функции, общее число запусков локального решателя (, из них успешных и неуспешных. етвертый выходной аргумент представляет собой структуру глобального решения, которая включает массив  точек найденных минимумов, вектор значений целевой функции в этих точках, вектор значений локального решателя, структуру  и массив 0 стартовых точек. чевидно, что эту структуру следует указывать в выходных аргументах в тех случаях, когда требуется получить данные обо всех найденных минимумах. ример 7. айти глобальный минимум функции  3(1 12( 21   (2  12 10( 15  31   52   ( 21   21     13 ( (1  12  22   на параллелепипеде3    3,   1, 2. апомним, что данная функция представлена в -файле с именем. опытаемся найти глобальное решение методом .ля этого создадим объект  с параметром  в значении, что обеспечит вывод итераций главного цикла ( 2 гло-46 бального поиска. атем выберем алгоритм локального поиска -, создадим адачу ( с целевой функцией и обратимся к функции .  итоге имеем следующую программу:   (,;   (,-;   (,0,0,... ,,,-3,-3,,3,3,... ,; ,,,,  ... (,; е достаточно для поиска решения, но, чтобы придать наглядностьрешению, дополним ее трехмерным графиком функции, на котором вгоризонтальной плоскости переменных отобразим линии уровня (контуры функции, стартовые точки и центры бассейнов (найденные минимумы. ри этом графические построения будем производить пофункции 1, записанной в одноименном -файле:  1(, 3(1-.2.(-.2-(1.2-10(5....  -.3-.5.(-.2-.2-13(-(...  1.2-.2;  ля удобства многократных запусков оформим расширенную программу в виде функции от начальной точки с именем :  (0 ,(-4:0.1:4; 1(,;(,,; (1;(2;(; ;   (,;   (,-;   (,0,0,... ,,,-3,-3,,3,3,... ,; ,,,,  (,      ;      1:(,2        (-1, (  1;   (; 47       (.0; 0  (:, 2, (; -10((0; 3(0(1, :, 0(2, :,,., ... ,,,12;        -10(((.; 3((.(1, (.(2,,, ... , , ,10;        ,       тобы сравнить с результатами применения локального метода впримере 6, запустим программу  с начальной точки, которая тогда оказалась неудачной:  0-0.5 3; (0 осле завершения вычислений выводится информация о большихитерациях в виде следующей таблицы:          - (   (    0 84 3.287-005 3.287-005 1    200 1321 -3.05 -3.05 1  1   217 1383 -6.551 -3.461 -3.05 -6.551 1  2   227 1429 -6.551 -4.196 -3.461 -6.551 1  2   300 1502 -6.551 -0.06148 -3.327  2   400 1602 -6.551 -1.315-005 -0.4178  2   422 1658 -6.551 -0.2512 -0.1343 -6.551 1  2   491 1761 -6.551 -1.827 -0.6872 -3.05 1  2   500 1770 -6.551 0.04837 -2.211  2   529 1834 -6.551 -2.118 -2.104 -3.05 1  2   600 1905 -6.551 -0.9791 -1.729  2   700 2005 -6.551 -1.429 -6.25  2   800 2105 -6.551 0.009279 -2.641  2   879 2216 -6.551 -1.405 -1.305 -3.05 1  2   880 2249 -6.551 -1.48 -1.405 -3.05 1  2   900 2269 -6.551 -2.18 -2.956  2   1000 2369 -6.551 -6.318 -6.525  2  десь по каждой итерации представлены число проверенных пробных точек, количество вычислений целевой функции и лучшее из ее48 достигнутых значение, текущий и пороговые штрафы, минимум ( локального решателя и признак его завершения и стадия алгоритма. алее выводится сообщение:         .  9           . но информирует, что алгоритм остановился, так как проанализированы все пробные точки, все девять запусков локального решателязавершились с положительным признаком (в таблице значение1 соответствует всем девяти локальным поискам. ледующая порция вывода содержит основные итоговые результаты:  координаты лучшей точки   0.2283 -1.6255  значение целевой функции в этой точке   -6.5511  признак завершения лучшего поиска   1  структуру вывода, в которой дается общее количество обращений к целевой функции, общее число запусков локального решателя ииз них удачных и неудачных   : 2369  : 9  : 9  : 0  : 0  : 1137  авершается вывод в командное окно представлением глобальнойструктуры    13   :          0 49 аконец, в графическом окне мы видим целевую функцию и точки, приводящие к минимумам (рис. 11. ис. 11. оиск глобального минимума методом а этом рисунке ромбиками показаны стартовые точки, приведшие к минимуму, а снежинками  центры бассейнов притяжения (локальные минимумы. дному минимуму соответствует один цвет ромбиков и снежинок. нтересно, что один из обнаруженных минимумов(зеленая снежинка соответствует тому, в котором застрял локальный решатель в примере 6. сли нас интересуют все минимумы, то получить их координаты и соответствующие значения целевой функцииможно из структуры  (см. программу . ак следует из полученных численных и графических данных, впроцессе поиска по методу  исследовано 1000 пробных точек, из них восемь точек использованы как стартовые для локального решателя, при этом из пяти точек достигнут локальный минимум со значением целевой функции 3,05 (эти точки имеют синийцвет, из трех точек  локальный минимум со значением 6,551 (черный цвет, а начальная точка 0 привела в минимум со значением3.287-005 (зеленый цвет.  целом поиск оказался успешным: в точке(0,2283 1,6255 найден глобальный минимум со значением целевойфункции 6,5511. 50 4.2. етод  целевой функции и функциям ограничений решаемой задачипредъявляются такие же требования, как в . етоды и  базируются на общей идее: поиск минимумов осуществляется запуском локального решателя из множествастартовых точек, а отличаются они способами формирования и выбораэтих точек. роме того, в  можно использовать не только, но и другие локальные решатели, а также распараллеливатьпроцесс. бъект  создается выражением  , где   имя объекта, его глобальные свойства (параметры приведены в прил. 3. адача ( создается так же, как в . ыполнение алгоритма осуществляется функцией . сновными шагами алгоритма  являются генерациястартовых точек, фильтрация сгенерированных точек и запуск локального решателя. одробнее остановимся на первом шаге. меется четыре способа задания набора стартовых точек. 1. спользовать объект , генерирующийпсевдослучайные числа. н создается предложением  ; о умолчанию такой объект генерирует 10 стартовых точек. сли требуется другое число точек, оно указывается как значение параметра, например  (,70задает 70 точек. а множество генерируемых точек можно накладывать искусственные границы через параметр  (,70, ... ,50. сли задача не содержит границ, то нижней границей будет , а верхней , где   значение . ри наличии только нижней границы  верхняя граница будет равна 2.  когдаесть только верхняя граница , нижней границей будет -2.51 2. адать число стартовых точек  как входной параметр функции.  этом случае будет генерироваться -1 псевдослучайных точек, к которым добавляется начальная точка 0. 3. оздать пользовательский объект . ляэтого сначала формируют матрицу, в которой каждая строка  это координаты стартовой точки. апример, матрицу  из 50 точек четырехмерного пространства, равных 20 плюс экспоненциально распределенное случайное число со средним значением 10, можно получить так:   -10((50,4  20; атем на этой матрице создается объект:   (. тобы увидеть матрицу , можно воспользоваться функцией :   (. 4. спользовать несколько наборов точек. апример, для образования множества стартовых точек с использованием приведенных выше объектов  и  следует ввести  -10((50,4  20;   (;   (,40;   ,. ключение  в качестве параметра функции  обеспечитгенерирование 90 стартовых точек. еперь рассмотрим второй шаг алгоритма. ильтрация сгенерированных точек имеет место, когда параметр  равен или -: в качестве стартовых будут использованы только точки, удовлетворяющие указанным ограничениям. о умолчанию используются все точки (параметр  . а третьем шаге  запускает локальный решатель, указанный в задаче (.  качестве него может быть выбран один изследующих решателей: , , , . оследние два решателя предназначены для задач подбора кривой и неотрицательного линейного метода наименьших квадратовсоответственно (см. гл. 9. сли установлен параллельный режим, тостартовые точки распределяются по работающим процессорам, которыезапускают локальный решатель. сли решатель остановился из-за исчерпания лимита времени, то решение не фиксируется, иначе запоминаются результаты и выполняется следующий шаг. лгоритм заверша-52 ется, когда использованы все стартовые точки или время решения превысило допустимое (. ри этом, как и в , формируется множество решений , упорядоченное по значениям целевой функции. з каждого множества идентичныхрешений, которые выявляются с использование параметров  и, в него попадает только одно. алее рассмотрим на примерах применение метода . ример 8. айти минимумы функции2 46 2 41 1 1 12 2 2      4 2,1 3 4 4      при условиях3    3,   1, 2. елевую функцию представим в виде -файла с именем :    ( 4(12 - 2.1(14  (163 ...   (1(2 - 4(22  4(24;  оздаем объект со свойством вывода информации по итерациям:   (,; в качестве локального решателя выбираем  с алгоритмомвнутренней точки и создаем проблему:   (,-;   (,0,0,... ,,,-3,-3,,3,3,... ,; и, наконец, задаем 40 стартовых точек в команде запуска :,  (,,40. акой программы достаточно для решения нашей задачи. о чтобы наглядно продемонстрировать работу метода, расширим программу, добавив команды вывода 3-графика функции, ее линий уровня иотображения стартовых и конечных точек локальных поисков. ляотображения графики создадим второй -файл целевой функции:    (,  4.2 - 2.1.4  .63 ...   . - 4.2  4.4;  53 роме того, расширим вывод функции , и в итоге получаемследующую программу, оформленную как функция 1:   1(0 ,(-3:0.03:3;(,; (,,; (1;(2;(; ; (,,,-0.8 -0.2 0.07 1 3 7 ... 15 28 45 65,; (1;(2;   (,;   (,-;   (,0,0,... ,,,-3,-3,,3,3,... ,; ,,,,  (,,40      ;      1:(,2        (-1, (  1;   (;       (.0; 0  (:, 2, (; (0(1, :, 0(2, :,., ... ,,,12;        ((.(1, (.(2,, ... , , ,10;        ,         произвольно взятой начальной точки запускаем программу 00 1; 1(0 начала выводится график функции с контурами на горизонтальной плоскости (рис. 12, на котором визуально обнаруживается несколько минимумов. атем следует отчет по итерациям, строки которого соответствуют всем стартовым точкам, включая начальную: 54      -   (   -  1 1 -1.032 9 35 8.744-007 2 1 -1.032 17 55 8.745-007 3 1 -1.032 8 31 8.745-007 4 1 -1.032 8 31 8.741-007 5 1 -1.032 14 47 1.749-007 6 1 -1.032 8 30 8.744-007 7 1 -1.032 10 35 8.745-007 8 1 -0.2155 11 58 3.742-008 9 1 -1.032 10 37 8.744-007 10 1 -1.032 11 40 8.745-007 11 1 -1.032 15 51 2.645-008 12 1 -1.032 10 35 8.743-007 13 1 -1.032 11 40 8.745-007 14 1 -1.032 10 37 1.154-008 15 1 -1.032 8 32 8.745-007 16 1 -1.032 13 44 1.749-007 17 1 -0.2155 12 44 4.616-008 18 1 -1.032 11 41 8.838-007 19 1 -1.032 13 48 8.744-007 20 1 -0.2155 11 44 2.381-008 21 1 -1.032 11 40 8.743-007 22 1 -0.2155 9 34 9.864-008 23 1 -1.032 12 43 9.457-007 24 1 -1.032 11 38 4.135-008 25 1 -1.032 13 48 8.744-007 26 1 -1.032 9 33 8.743-007 27 1 -0.2155 13 47 2.381-008 28 1 -0.2155 15 53 9.864-008 29 1 -1.032 8 32 8.743-007 30 1 -0.2155 12 43 1.074-007 31 1 -0.2155 11 41 4.09-008 32 1 2.104 13 45 2.872-007 33 1 -1.032 15 60 8.745-007 34 1 -0.2155 13 45 1.025-007 35 1 -1.032 10 36 8.744-007 36 1 -1.032 9 33 8.745-007 37 1 -1.032 15 53 8.745-007 38 1 -0.2155 9 39 3.037-007 55 39 1 -1.032 9 32 8.745-007 40 1 -1.032 9 32 8.743-007        .  40           . ис. 12. ункция з этого отчета следует, что поиск из всех 40 точек завершилсяуспешно ( везде равен 1, при этом получены три минимальных значения целевой функции. атем выводятся данные по лучшему минимуму и структуры и :   -0.0898 0.7127   -1.0316   1    : 1645  : 40  : 40  : 0  : 0 56  : 1128     15   :          0 з последней части отчета имеем: самое минимальное значение функции цели 1,0316 достигнуто в точке (0,0898 0,7127, при этом функциявычислялась 1645 раз и обнаружено пять локальных минимумов. авершает вывод карта линий уровня (контуров целевой функциис нанесенными на нее стартовыми точками (цветные точки и точкаминайденных минимумов (обозначены символом . на представлена нарис. 13. ис. 13. инии уровня функции  и точки началаи окончания локальных поисковис. 13 подтверждает обнаружение пяти минимумов, из них двепары минимумов оказались симметричными относительно начала координат, и поэтому минимальных значений функции только три. 57 апустим программу повторно из той же начальной точки, убравпредварительно вывод отчета по итерациям.  результате получаем   0.0898 -0.7127   -1.0316   1    : 1589  : 40  : 40  : 0  : 0  : 1128     16   :          0 асположение стартовых точек и найденных минимумов показанона рис. 14. ы видим, что теперь при несколько меньшем числе вычисленийцелевой функции обнаружено шесть минимумов, из них три пары симметрично расположенных относительно начала координат. ри многократных повторах выполнения программы обнаруживается от четырехдо шести минимумов, и всегда в их число попадают два симметричныхминимума с 1   0,0898, 2  0,7127 и   1,0316, которые и являются глобальными. 58 ис. 14. езультаты повторного поиска минимумовфункции ример 9. етодом  найти минимумы уже исследованной ранеефункции   3(1 12 ( 21   (2  12 10(15  31   52  ( 21   21    13 ((1  12  22   при условиях3    3,   1, 2. ля решения этой задачи составим программу, подобную 1, но отличающуюся тем, что она позволит на одном графикеотображать и функцию, и контуры, и все точки, фигурирующие в процессе поиска:  12(0 ,(-4:0.1:4; 1(,;(,,; (1;(2;(;   (,; 59   (,-;   (,0,0,... ,,,-3,-3,,3,3,... ,; ,,,,  (,,40   ;      1:(,2        (-1, (  1;   (;       (.0; 0  (:, 2, (; -10((0; 3(0(1, :, 0(2, :,, ., ... ,,,12;        -10(((.; 3((.(1,(.(2,,, ... , , ,10;        ,        адаем начальную точку и запускаем нашу программу:  03 -0.5;12(0 ерез несколько секунд появляется отчет по итерациям:      -   (   -  1 1 -6.551 17 63 6.311-008 2 1 -6.551 10 39 2.394-007 3 1 -6.551 10 38 2.394-007 4 1 6.687-005 20 63 5.184-007 5 1 -3.05 10 37 1.21-008 6 1 -6.551 14 55 2.374-007 7 1 -3.05 29 99 1.406-007 8 1 -6.551 15 54 2.99-007 60 9 1 6.686-005 22 69 7.893-007 10 1 -6.551 22 110 1.182-007 11 1 4.106-005 26 81 5.769-008 12 1 -6.551 10 38 1.202-007 13 1 4.125-005 24 75 8.355-007 14 1 -3.05 11 43 5.885-008 15 1 -6.551 10 43 2.394-007 16 1 -6.551 9 37 6.063-008 17 1 -6.551 12 48 5.858-008 18 1 -6.551 10 41 9.978-008 19 1 -3.05 11 39 1.462-008 20 1 -3.05 11 44 1.481-007 21 1 -3.05 12 43 3.072-008 22 1 6.687-005 20 63 5.012-007 23 1 -6.551 9 42 1.569-007 24 1 -3.05 16 53 9.032-008 25 1 3.227-005 26 81 6.415-008 26 1 -3.05 8 33 5.869-008 27 1 -6.551 12 45 1.798-007 28 1 4.125-005 27 84 6.959-007 29 1 -3.05 15 52 5.174-008 30 1 -6.551 21 71 1.182-007 31 1 -6.551 16 54 9.978-008 32 1 -6.551 12 50 2.394-007 33 1 -3.05 12 43 8.849-008 34 1 -6.551 13 58 8.356-008 35 1 -3.05 9 34 1.21-008 36 1 -3.05 11 42 3.072-008 37 1 -3.05 12 42 9.032-008 38 1 -6.551 10 39 2.394-007 39 1 -3.05 13 45 1.183-007 40 1 -6.551 21 72 6.311-008        .  40           . осле таблицы выдано сообщение, в котором констатируется, чтометод завершил работу по причине использования для поиска всехстартовых точек, и все старты локального решателя привели к сходи-61 мости. оследующая часть текстового вывода содержит итоги работы:  точку предполагаемого глобального минимума и его значение  0.2283 -1.6255   -6.5511  признак завершения глобального поиска и его структуры  1   : 2165 : 40 : 40 : 0 : 0 : 1128     18  :     0 аким образом, поиски из 40 стартовых точек позволили выявитьвосемь точек, в которых возможен глобальный минимум. ак леглиэти точки на заданную область поиска, показано на рис. 15. ам жесимволом  отмечены пять локальных минимумов, включая глобальный минимум в точке (0,2283 1,6255 со значением целевой функции6,5511. то же решение было получено методом (пример 7, которому потребовалось вычислять целевую функцию2369 раз против 2165 методом . 62 ис. 15. оиск минимумов функции  методом  ример 10. айти максимумы функции из примера 9 при тех же условиях. тобы воспользоваться тем же методом, изменим знак функции изапишем ее в -файл с именем 2, заменим ею функцию  в12 и новую версию программы запишем под именем 13. езультаты, полученные при выполнении этой программы, приведены ниже.  03 -0.5; 13(0      -   (   -  1 1 -3.592 11 39 5.336-008 2 1 -3.592 10 36 6.254-008 3 1 -8.106 9 36 6.565-008 4 1 -3.777 7 37 8.437-007 5 1 -3.592 19 69 3.018-008 6 1 -3.592 21 77 2.333-007 7 1 -8.106 11 40 1.193-007 8 1 -8.106 22 76 2.82-007 63 9 1 -8.106 13 49 1.193-007 10 1 -8.106 24 112 1.41-007 11 1 -3.592 10 36 5.336-008 12 1 -8.106 10 38 1.193-007 13 1 -3.777 9 35 8.437-007 14 1 -3.592 23 84 5.958-008 15 1 -8.106 10 37 1.605-007 16 1 -8.106 30 104 1.194-007 17 1 -8.106 20 68 1.193-007 18 1 -8.106 15 76 2.385-007 19 1 -8.106 31 101 5.952-007 20 1 -8.106 31 104 8.512-008 21 1 -3.777 10 38 8.437-007 22 1 -8.106 21 81 2.82-007 23 1 -3.777 14 50 8.731-008 24 1 -8.106 11 42 5.96-007 25 1 -8.106 18 61 1.192-007 26 1 -8.106 17 61 2.82-007 27 1 -8.106 9 37 3.577-007 28 1 -3.777 9 36 5.668-008 29 1 -8.106 10 38 2.385-007 30 1 -8.106 10 37 2.385-007 31 1 -3.592 12 40 1.192-007 32 1 -3.777 9 34 8.435-007 33 1 -8.106 18 63 8.512-008 34 1 -8.106 11 42 3.576-007 35 1 -8.106 15 52 8.512-008 36 1 -8.106 12 44 1.41-007 37 1 -3.777 15 54 8.437-007 38 1 -3.777 8 34 8.436-007 39 1 -8.106 8 34 1.193-007 40 1 -3.592 10 36 8.572-008        .  40           .    -0.0093 1.5814    -8.1062   64  1    : 2171  : 40  : 40  : 0  : 0  : 1128     13   :          0 ис. 16. оиск максимумов функции  методом ак следует из текстового отчета и рис. 16, найдено три максимума, наибольший из которых равен 8,1062 и находится в точке (0,0093 1,5814. олее точное представление о расположении стартовых точек65 и минимумов может дать контурная карта. тобы ее получить, изменим программу 13, уменьшив объем текстового отчета иубрав 3-представление функции. змененную программу 14 запускаем с той же начальной точки и получаем краткийотчет и контурную карту со всеми стартовыми точками и точками минимумов (рис. 17:  03 -0.5; 14(0        .  40           .    -0.0093 1.5814    -8.1062    1    : 2162  : 40  : 40  : 0  : 0  : 1128     13   :     0 тобы получить значения всех найденных максимумов и их координат, обратимся к структуре :  .    -8.1062 -3.7766 -3.5925 значения функции с обратным знаком в трех максимумах66  .     1  5  -0.0093 1.5814 -0.4600 -0.6292 1.2857 координаты трех  6  -0.0048 максимумоваким образом, задача решена успешно. ис. 17. тартовые точки и максимумы ( на контурной картефункции ример 11. ешим задачу из примера 10 при дополнительном ограничении41  52  7.  программу 14 внесем изменения: при созданиипроблемы ( помимо границ зададим линейное ограничение, добавим функцию рисования этого ограничения, в команде  определим 50 стартовых точек и параметром  в объекте  потребуем использовать только те точки, которые удовлетворяют всем условиям.  итоге имеем следующую программу: 67  15(0 ,(-3:0.03:3;1(,; (,,,30; (1;(2; ; (-3 2, ... -1 3, -,,2.3;    (,-;   (,-;   (,0,0,... ,2,,-4 5,,7,, ... -3, -3,,3,3,,; ,,,,  (,,50      ;      1:(,2        (-1, (  1;   (;       (.0; 0  (:, 2, (; (0(1, :, 0(2, :,., ... ,,,12; ((.(1, (.(2,, ... , , ,10;        ,        ыполним эту программу:  03 -0.5; 15(0 ыполнение завершается выдачей результатов решения задачи ввиде рис. 18 и текстового отчета:        .  37           .    0.1265 1.5012 68    -7.8502    1    : 1880  : 37  : 37  : 0  : 0  : 1128     13   :          0 ис. 18. асположение стартовых точек и максимумовпри линейном ограничении69 з рис. 18 видно, что все использованные стартовые точки лежат вдопустимой области  это 37 точек из 50 заданных. стественно, чтоглобальный максимум, равный 7,8502, оказался меньше, чем при отсутствии линейного неравенства, и потому лежит на границе этого неравенства. ак и в предыдущем примере, всего найдено три максимума, два из которых те же, что в варианте задачи без неравенства. начения максимумов и их координаты получим из глобальной структуры: .    -7.8502   -3.7766    -3.5925 .    0.1265 1.5012 -0.4600 -0.6292 1.2857 -0.0048  массиве  представлены три пары точек, соответствующих координатам трех максимумов, а значения максимумов с обратным знаком  в переменных . абораторная работа  3сследование методов  и адания: 1. знакомиться с основами методов  и, уяснить синтаксис и параметры создания глобальныхобъектов и проблемы, параметры команды . 2. оспроизвести программу из примера 8 и провести пять запусков; сделать анализ результатов. 3. рименить методы  и  для нахождения минимумов функции   (1(1  22    0,41 при условиях4   4,   1, 2. равнить эффективность методов. 70 4. рименить методы  и  для нахождения минимумов функции из примера 9 при дополнительном ограничении 41  52  5. опоставить решения при разном числе стартовыхточек и разных значениях параметра . 4.3. етод  етоды прямого поиска отличаются тем, что в них направлениедвижения к оптимуму определяется только по значениям целевой функции, т.е. не используются производные функции (градиенты и гессианы. оэтому эти методы можно применять для минимизации недифференцируемых функций и функций, не являющихся непрерывными. акет   включает три алгоритма прямогопоиска: 1   обобщенный поиск по шаблону или образцу (; 2   поиск по генерируемому набору; 3   адаптивный поиск петли ( или окружения. се они являются алгоритмами исследования образца, порождающими последовательность точек, приближающихся к минимуму. акаждом шаге определяется набор точек вокруг текущей точки, называемый окружением или петлей (. очки окружения образуютсядобавлением к текущей точке произведения скаляра на векторы, совокупность которых и называют шаблоном или образцом (. сли в окружении находится точка с меньшим значением целевой функции, чем в текущей точке, она становится текущей для следующегошага алгоритма. -алгоритм для создания  использует векторы фиксированных направлений. рименяются два набора таких векторов: 1 2 положительный базис (2  , содержащий  векторов единичной матрицы размера  и  векторов противоположного знака, где   число независимых переменных в целевойфункции. апример, при   3 такой набор состоит из шести векторов:1  1 0 0, 2  0 1 0, 3  0 0 1, 4  1 0 0, 5  0 1 0, 6  0 0 1; 2   1 положительный базис, содержащий  векторов единичнойматрицы размера  и один -мерный вектор, все элементы которогоравны 1. апример, при трех переменных имеем1  1 0 0, 2  0 1 0, 3  0 0 1, 4  1 1 1. 71 налогичный набор векторов (шаблон использует алгоритм , за исключением случаев, когда в задаче с линейными ограничениямитекущая точка оказывается вблизи линейного ограничения. пециальный способ построения шаблона в этой ситуации предложен ,  и  и здесь не рассматривается. оэтому алгоритм предпочтительнее  для задач с линейными ограничениями.  алгоритме  векторы образца выбираются случайным образом.  зависимости от метода проверки или опроса ( число выбираемых векторов равно 2 или   1.  первом случае генерируются векторов, а остальные  образуются изменением знака у первых векторов. о втором случае каждый компонент вектора   1 есть суммакомпонент первых  векторов, взятая с обратным знаком. ыбор алгоритма определяется параметром , поумолчанию его значение равно 2, что соответствует алгоритму  с 2 положительным базисом. помянутый выше скаляр, используемый для формирования окружения, называется размером окружения и обозначается . сли   текущая точка, а   точка ее окружения, то она находится по формуле    ,   1, , 2 или   1, ,   1. а каждом шаге алгоритм обходит ( точки окружения, вычисляя в них значение целевой функции. огда параметр   включен (, обходятся все точки окружения. сли среди нихокажется точка со значением целевой функции меньше, чем у текущейточки, она становится новой текущей, а обход считается успешным. сли параметр   установлен в , что принято поумолчанию, обход прекращается, как только найдена точка с лучшим, чем у текущей точки, значением целевой функции, и такая точка становится новой текущей. ри неуспешном обходе текущая точка не изменяется. араметр  определяет порядок, в котором ищутсяточки окружения. го значения:   в случайном порядке,   первое направление поиска равно направлению, на которомнайдена лучшая точка на предшествующей итерации,   последовательный порядок, согласно векторам образца. пции поиска (  позволяют указать алгоритму, что он может делать перед опросом (обходом точек окружения. слиэтот дополнительный поиск улучшает целевую функцию, то соответ-72 ствующая точка используется на следующей итерации, а опрос не проводится. десь основным параметром является , поумолчанию шаг дополнительного поиска не делается (значение равно , другие значения параметра приведены в прил. 4. а каждой итерации размер окружения изменяется: при успешномобходе он умножается на коэффициент расширения , при неуспешном  на коэффициент сужения  (поумолчанию они равны 2 и 0,5 соответственно. лгоритм завершаетработу при выполнении одного или нескольких критериев окончания, значения которых можно изменять через функцию установки параметров поиска . арианты критериев даются ниже при описании . ля решения задач, содержащих нелинейные ограничения, применяется алгоритм поиска по образцу, использующий расширеннуюфункцию агранжа (сокращенно . ри общей модели задачиминимизации в виде  ( при условиях (  0,   1, , ,(  0,     1, , ,  ,   ,     функция агранжа включает только нелинейные ограничения: 21 1( , , ,  (  ( (  ( (  (  2                                , где   неотрицательные множители агранжа;   неотрицательные смещения,   положительный параметр штрафа. ачальное значение параметра штрафа по умолчанию равно 10, а коэффициента его увеличения  100. ти значения могут быть изменены параметрами  и  соответственно. 73 лгоритм прямого поиска при удовлетворении границ и линейныхограничений минимизирует последовательность подзадач агранжа, которая аппроксимирует исходную задачу. огда минимизация подзадачи достигает требуемой точности и удовлетворения допустимости, оценки лагранжиана обновляются. наче параметр штрафа увеличивается в  раз, и измененная подзадача снова минимизируется. ти шаги повторяются до выполнения критерия останова.     описанный алгоритм реализован в виде функции . ассмотрим варианты обращения к данной функции.    (,0    (,0,,    (,0,,,,    (,0,,,,,,    (,0,,,,,,,    (,0,,,,,,,... ,    (  ,  (,0, ...  ,,  (,0, ...  ,,,  (,0, ...мысл входных аргументов функции такой же, как и в ранее рассмотренных функциях. становимся только на отличающихся по значениям и составу последних двух выходных аргументах. ндикатор  в зависимости от причин останова можетиметь одно из следующих значений: 1  значение размера окружения меньше допустимого и нарушение ограничений меньше ,2  изменение  меньше допустимого и нарушение ограниченийменьше ,4  величина шага меньше машинной точности и нарушение ограничений меньше ,0  число вычислений целевой функции превысило допустимоезначение, -1  оптимизация остановлена функцией вывода графика, -2  не найдено допустимой точки. 74 труктура  содержит следующие поля:   целевая функция,   тип задачи: без ограничений, с границами или линейными ограничениями,   метод создания окружения (алгоритм,   используемый дополнительный метод поиска,   общее число итераций,   общее число вычислений целевой функции,   размер окружения,   максимальное нарушение ограничений,   сообщение о причине останова алгоритма. араметры оптимизации прямым поиском, как обычно, установлены по умолчанию, но могут быть изменены функцией путем записи выражения  (1,1,2,... 2,...,где в качестве аргументов функции указываются пары имя, значениепараметра. сли справа от равенства записать только имя функции, тоэто приведет к восстановлению значений всех параметров по умолчанию. се параметры и их значения по умолчанию приведены в прил. 4. а работу алгоритма влияют параметры, определяющие окружение (:   размер начального окружения (длина самогокороткого вектора от начальной точки к окружению, по умолчаниюравен 1,0;   макимальный размер окружения, по умолчсниюравен для  и  , а для  1;   задает или нет ускорение сходимости вблизиминимума; ,   коэффициенты изменения размера окружения (их значения по умолчанию приведены в описании алгоритма;   задает или нет умножение векторов окружения на 1 после неудачного опроса при размере окружения меньше чем100; применяется, когда  установлен в  или75  с   1; включение полезно для функций с разрывами, но не работает при наличии равенств;   включает или нет масштабирование точек окружения умножением векторов образца на константу, пропорциональнуюлогарифму абсолютного значения компонент текущей точки (по умолчанию ; при наличии равенств блокируется.  случае детерминированной целевой функции, требующей большого времени вычисления, ускорить алгоритм можно включениемкеш-памяти. на позволяет не делать вычисление функции в точке, которая близка к ранее опрошенной точке. ключение осуществляетсяпараметром , а изменить размер памяти можно параметром. аконец, параметры    позволяют выбрать способ вычисления функций: последовательный, паралелльный или векторизованный. рафики, отражающие процесс работы алгоритма, можно получить с помощью функций вывода графики. ни задаются параметром, а набор соответствующих функций пакета дан в прил. 4. ри использовании собственной функции ее первая строка должна соответствовать синтаксису   (, , где   структура, содержащая поля:   текущая точка,  номер итерации,   значение целевой функции,   текущий размер окружения,   число вычислений функции,   метод, использованный в последней итерации,   допуск на значение целевой функции  допуск на ,   индикация нелинейных неравенств,   индикация нелинейных равенств;   текущее состояние, в котором вызвана функция, его значения:   начальное состояние, 76   процесс итераций,   промежуточная стадия,   конечное состояние. налогично может быть подключена стандартная функция илифункции вывода данных о ходе процесса параметром . писание собственной функции вывода должно начинаться со строки,,  (,,,, где   число итераций между вызовами функции,   индикатор изменения параметров,  равен при продолжении работы алгоритма и  при завершении на текущей итерации. ример 12. айдем минимумы функции  5  211  0,5 13  0,7 2  3 2  2  2(1  2 при условиях4    5,   1, 2. ак видно, целевая функция дифференцируема не всюду, что непозволяет использовать методы, требующие градиента. оэтому длярешения нашей задачи применим метод прямого поиска  . а рис. 19 представлен 3-график целевой функции, из которого следует, что функция имеет по крайней мере два минимума. ак и раньше, сначала функцию запишем в два -файла  один дляее вычислений в алгоритме, второй для графического представления:    1( 5((1-12((1-... 30.5((230.7((2 -2... 2((1(2;    (, 5(-12(-30.5(30.7(-2... 2(; 77 ис. 19. ид целевой функции из примера 12 оставим программу, в которой все параметры поиска имеют значения по умолчанию и предусмотрено отображение линий уровня целевой функции и лучших точек каждой итерации. рограмму представим как функцию начальной точки 0:  (0  .0;  .;   (,;  ,,,  (1, ... 0,,,,,-4 -4,5 5,,  .(:,1;.(:,2; (,,.,(1,(2,; ; ,(-4:0.03:5;(,; (,,,25,;(1;(2;     (,    ;                     78  .  .; .;  .  .; .;      апустим программу из точки (4 3, результаты ее выполненияприведены ниже.  0-4 3; (0  :     ..    1.8643 2.0000    9.4736    1    : 1  :   : 2  :   : 48  : 152  : 9.5367-007  : 0  :  :     ..    : 492   : 481  тчет показывает, что использован метод создания окружения(  2 и за 48 итераций найден один из минимумов, о чем свидетельствует значение . тобы посмотреть, как изменялись значения , обратимся к .: 79  .    -4.0000 3.0000  -4.0000 2.0000  -2.0000 2.0000  -2.0000 2.0000  -2.0000 2.0000  2.0000 2.0000  2.0000 2.0000  2.0000 2.0000  2.0000 2.0000  2.0000 2.0000  2.0000 2.0000  1.7500 2.0000  1.7500 2.0000  1.7500 2.0000  1.8750 2.0000  1.8750 2.0000  1.8750 2.0000  1.8750 2.0000  1.8750 2.0000  1.8594 2.0000  1.8594 2.0000  1.8594 2.0000  1.8672 2.0000  1.8672 2.0000  1.8672 2.0000  1.8633 2.0000  1.8633 2.0000  1.8633 2.0000  1.8652 2.0000  1.8652 2.0000  1.8652 2.0000  1.8643 2.0000 80  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000  1.8644 2.0000  1.8644 2.0000  1.8644 2.0000  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000  1.8643 2.0000 з этих данных видно, что уже на шестой итерации точка оказывается вблизи минимума, затем ряд изменений размера окружения недает улучшения и в последующем идет уточнение первой координатыдо достижения заданной точности по размеру окружения ( 9.5367-007 . а рис. 20, где эти точки представлены красными ромбиками, шестая точка самая правая, а точка минимума выделена символом . аметим, что по этим результатам мы не можем утверждать о глобальности найденного минимума, даже зная о наличии только двухминимумов. еобходимо найти второй минимум и сравнить значенияфункции в двух минимумах. оэтому повторим поиск из другой точки:  0-3.5 2;(0 езультаты поиска приводятся ниже. 81 ис. 20. оиск минимума функции 1методом   из точки (4 3  :     ..    1.0000 -2.4202    8.8487    1    : 1  :   : 2  :   : 46  : 159  : 9.5367-007  : 0  :  :     .. 82 ак продвигался этот поиск, можно видеть на рис. 21. а этот раздостигнут второй минимум, и он оказался более глубоким, а следовательно, глобальным. ис. 21. оиск минимума функции 1методом   из точки (3,5, 2 озьмем еще одну точку справа от минимумов:  04.5 3; (0  :     ..    1.0000 -2.4202    8.8487    1    : 1  :   : 2  :   : 48  : 167 83  : 9.5367-007  : 0  :  :     .. олученные данные и рис. 22 свидетельствуют о том, что сновадостигнут глобальный минимум. днако еще один поиск из начальнойточки (3,5 4 не приводит к глобальному минимуму:  0-3.5 -4;(0  :     ..    1.8643 2.0000    9.4736    1 : 60 : 170 з этого можно заключить, что результат работы алгоритма случаен и зависит от выбора начальной точки. ис. 22. оиск минимума функции 1 методом   из точки (4,5 3 84 еперь посмотрим, что даст алгоритм . становим его в опциях, указав как аргумент функции  параметр со значением 2. апустим программу из предыдущей точки:  0-3.5 -4; (0  :     (.    1.0000 -2.4202    8.8487    1    : 1  :   : 2  :   : 42  : 197 ы видим, что в отличие от  алгоритм , стартуя из этойточки, находит глобальный минимум. днако из точки (4 3 метод, как и , приводит только к локальному минимуму, и вывод ослучайности нахождения глобального минимума методом   остается в силе. родолжим исследование этого метода и подключим один извспомогательных методов  нахождения шага. ля этого используем параметр  со значением, например, , тем самым указываем на метод елдера  ида(функция . от результаты:  0-4 3; (0  :     ..    1.8643 2.0000    9.4736    1 85    : 1  :   : 2  :   : 33  : 253  : 9.5367-007  : 0  :  :     .. чевидно, что подключение  не дало улучшения. огда возьмем опцию . о умолчанию она влияеттолько на первую итерацию, на которой поиск происходит в латинскомгиперкубе (. иперкуб представляет собой набор случайно сгенерированных точек на нескольких уровнях по каждой переменной. оумолчанию установлен вариант, по которому пары точек симметричныотносительно центра куба. так, изменив значение аргумента  на, повторим поиск из той же точки: 0-4 3;(0  :     ..    1.0000 -2.4202    8.8487    1    : 1  :   : 2  :   : 73  : 242  : 9.5367-007  : 0 86 ис. 23. артина поиска методом  из точки (4, 3 при подключении ак видно по распечатке результатов и рис. 23, из этой точки, наконец, достигнут глобальный минимум. стается проверить надежность этого варианта поиска. овторим поиск из этой же точки: 0-4 3; (0  :     ..    1.8643 2.0000    9.4736    1    : 1  :   : 2  :   : 67  : 227  : 9.5367-007  : 0  : 161  87 ис. 24. овторный поиск из точки (4 3 при подключении начение целевой функции (9.4736 и рис. 24 показывают, чторезультат поиска изменился: найденный минимум является только локальным. одводя итог экспериментам с применением метода  , можно сказать, что за один поиск этот метод позволяет находить только один минимум, который может быть как локальным, так иглобальным. 4.4. етод  то стохастический метод, предназначенный для решения задачбезусловной оптимизации и задач при наличии границ на переменные. етод моделирует процесс нагревания материального тела с последующим медленным снижением температуры для уменьшения дефектов. терация алгоритма   начинается с генерирования новой случайной точки с использованием для этого датчикапсевдослучайных чисел. асстояние между новой и текущей точкойназывается размером поиска. азмер определяется по распределениювероятностей, шкала которого пропорциональна текущей температуре. сли целевая функция в новой точке лучше, чем в текущей, то новая88 точка становится текущей (принимается.  противном случае новаяточка также может стать текущей, т.е. принятой, но только с некоторойвероятностью. то делается для того, чтобы по возможности избегатьзастревания в локальном минимуме. роцесс отжига определяетсяначальной температурой и графиком отжига, которые задаются параметрами  и  соответственно. о ходу выполнения алгоритм систематически понижает температурусогласно графику отжига, сохраняя при этом лучшую найденную точку. ем медленнее уменьшается температура, тем больше шансов найти оптимальное решение, но тем больше требуется времени. осле определенного числа принятых точек, задаваемого параметром , происходит переотжиг. н повышает температуру вкаждом измерении в зависимости от его чувствительности, после чегопоиск продолжается с новыми значениями температур. лгоритм останавливается, когда выполняется один из критериев останова.  качестве этих критериев используются следующие условия:  среднее изменение значения целевой функции, вычисляемое почислу итераций, заданному параметром , меньше;  число итераций алгоритма превысило ;  число вычислений целевой функции превысило ;  время выполнения алгоритма превысило  (с;  лучшее значение целевой функции не больше ; се параметры алгоритма, устанавливаемые через , приведены в прил. 5. сли нужно получить значения по умолчаниювсех параметров, то достаточно выполнить команду  ( сли же требуется изменить значения некоторых параметров, тоони описываются парами имя, значение каждого изменяемого параметра как аргументы функции , например,   (,1000,, араметр  позволяет использовать следующие функцииграфики:  отображает лучшее значение целевой функции, выводит лучшую точку, представляет текущее значение целевой функции,89  выводит текущую точку, показывает уровни критериев остановки, выводит температуру на каждой итерации,   функция, создаваемая пользователем. труктура пользовательской функции такая же, как для метода, а входной аргумент  содержит поля:   текущая точка,   значение целевой функции в х,   лучшая точка к данному моменту,   значение целевой функции в этой точке,   текущая температура,   текущая итерация,   число вычислений функции, 0  время старта алгоритма,   параметр отжига. ри необходимости использовать две или более функций графикиони перечисляются в фигурных скобках, например,   (,, оведение температуры задается тремя параметрами: начальнойтемпературой , функцией изменения температуры  и числом принятых точек перед переотжигом.  качестве функции  могутбыть указаны следующие:   температура равна 0.95, где   номер итерации (эта функция принята по умолчанию,  температура равна ,  температура равна (,   функция, создаваемая пользователем. помощью параметра  можно выбрать функциюгенерации новых точек. роме функции, создаваемой пользователем, впакете имеются две функции: , которая используетшаг, соответствующий температуре и случайно направленный, и90  с шагом, соответствующим корню квадратному изтемпературы и имеющим случайное направление. ри создании пользовательской функции используется синтаксис  (,, где   структура с полями  целевая функция, 0  стартовая точка,   число переменных задачи,   нижняя граница,   верхняя граница. араметр  позволяет вызывать в течение работы основной функции метода  или по окончании итераций решателя другую функцию оптимизации для улучшения конечного результата.  качестве такой функции могут быть , ,  или . ри необходимости изменения параметров этих функций используются соответствующие им опции, например: (,,,; (,,,; ля указания интервала работы решателя, на котором вызываетсядругая функция, используется параметр . тобы получить данные по каждой итерации решателя, пользователь должен создать соответствующую(ие функцию(и вывода, указавее(их в качестве значения(й параметра . обственнаяфункция записывется аналогично пользовательской, рассмотренной впредшествующем методе, а содержание  дано выше приописании . ак уже отмечалось, метод моделирования отжига реализован ввиде функции . тобы решить задачу, достаточно установить нужные или принять по умолчанию значения параметров ивызвать функцию метода. знать значения по умолчанию всех параметров можно командой  ( 91 бращение к функции возможно по одному из приводимых нижевариантов:   (,0   (,0,,   (,0,,,   ( ,  (... ,,  (... ,,,  (,... мысл всех аргументов ясен из рассмотрения предыдущих функций оптимизации. ервый вариант применяется, если решается задачана безусловный экстремум. ри наличии границ на переменные используется второй вариант. сли устанавливаются свои значения некоторых параметров, то обязателен третий вариант. а месте отсутствующих входных аргументов (кроме последнего записывается . одержание выходных аргументов  и  специфично для данной функции.  сообщает причину завершенияалгоритма через значения: 1  среднее значение целевой функции по  итерациям меньше, чем , 5  достигнут предел , 0  исчерпано максимальное число вычислений функции или итераций, -1  процесс остановлен функцией вывода или графики, -2  не найдено допустимой точки, -5  исчерпан лимит времени. труктура  содержит информацию о задаче и выполненииалгоритма в следующих полях:   тип задачи (без ограничений или с границами,   число итераций,   число вычислений целевой функции,   сообщение о причине останова,   температура на момент остановки,   общее время работы решателя,   состояние датчика случайных чисел перед началомработы алгоритма. ассмотрим примеры применения функции . 92 ример 13. етодом   найти минимум исследованнойранее в примерах 7 и 9 функции   3(1 12 ( 21   (2  12 10( 15  31   52   ( 21   21    13 ((1  12  22   при условиях3    3,   1, 2. та функция записана в -файлах ( и 1(,, последний из них предназначен для графического отображения функции. ля получения численного ответа достаточно обратиться к функцииметода по одному из описанных выше вариантов. днако мы составимпрограмму нахождения минимума с именем , используя в ней нетолько первый, но и второй файл целевой функции с тем, чтобы полнееи нагляднее представить результаты работы метода.  (0 .0; .;  (,; .; ,,,(,0,... -3 -3, 3 3, .(:,1;.(:,2; (,,.,(1,(2,; (0(1,0(20.12,0;  ; ,(-3:0.03:3;1(,; (,,,25,;(1;;(2;     (,,    ;                 ,        .  .;...  .;  .  .;... 93  .;  ..;...  .;      1; 1:2:.;  1(.(;    ;(1;(  ;  (1;  апустим программу из двух начальных точек:  02 2.5; (0  :        ..    0.2270 -1.6230    -6.5510    1    : 1650  : 1669  : 180   : 11   :   : 21   : 11.8281    : 16512   : 16501   : 33001  ешение получено за 1650 итераций, на что потребовалось 11,83 с.  результате найден глобальный минимум. а рис. 25 на фоне линийуровня целевой функции показаны лучшие точки, начиная с 0, а нарис. 26  изменение температуры в измерении 1. 94 ис. 25. оиск минимума функции  из точки (2 2,5 методом ис. 26. рафик изменения температуры по 1при поиске из точки (2 2,5 95 ак видно, переотжиг происходил четыре раза через интервалы от300 до 400 итераций. знаем температуру в финальной точке: по 1  .(3299     0.2962 по 2  .(3300     0.2882 овторим поиск из новой точки:  0-1 1; (0  :        ..    0.2276 -1.6258    -6.5511    1    : 2314  : 2341  : 180   : 11   :   : 21   : 20.6406    : 23152   : 23141   : 46281  ы получили тот же результат, однако на это ушло значительнобольше итераций и времени решателя. а рис. 27 представлено расположение лучших на текущую итерацию точек от начальной и до оптимальной, обозначенной символом , и график изменения температурыпо 1. о 2 температурный график имеет аналогичный вид.  отличие от предыдущего, в процессе этого поиска переотжиг производилсясемь раз. 96 ассмотрим еще один пример применения метода моделированияотжига. ример 14. айти максимум функции 2 2 4 4 1 12 1 2 2 44 (1 20,25(   (2 (0,5 0,5 ( 1 1 12 1,5 (0,5 0,5 ( 1                  при условиях0  1  4, 0  2  3. ис. 27. оиск минимума функции  из точки (1 1 методом : слева  лучшие точки, справа  график температуры по 1ак и выше, записываем целевую функцию в -файлы в двух вариантах:    1( -1.5(12(1-(12-20.25((1-(22-... (0.5(1-0.54((2-14(2-(0.5(1-0.54-... ((2-14;     1(, 1.5.2.(1-.2-20.25(-.2... (0.5-0.5.4.(-1.4.(2-(0.5-0.5.4-(1.40.5;  ид функции 1 показан на рис. 28, из которого следует наличие у функции многих экстремумов, в частности четырехмаксимумов. ля поиска максимума этой функции в программе  заменяемимена функций и значения границ переменных на новые, затем запускаем ее с задаваемой начальной точки. езультаты выполнения программы приведены ниже. 97  03 1.4;(0  :        ..    1.0016 1.0028    -1.5000    1    : 1601  : 1620  : 180   : 11   :   : 21   : 11.7031    : 16022   : 16011   : 32021  ис. 28. ид функции 1 98 олученные данные и рис. 29 показывают, что найден глобальныймаксимум, расположенный на гребне целевой функции. оиск занял1601 итерацию. а время поиска переотжиг выполнялся пять раз. емпературы в конечной точке поиска берем из :  .(3201,.(3202    0.0077 0.0073 ис. 29. онтуры функции 1 и расположение лучших точеква приведенных примера свидетельствуют о высокой надежности отыскания глобального экстремума методом моделирования отжига. днако следует помнить, что этот метод не решает задачи с функциональными ограничениями. абораторная работа  4 сследование методов прямого поиска и отжигаадания: 1. знакомиться с описанием методов  и  и вызовом соответствующих функций, изучить основныепараметры методов. 99 2. оспроизвести программу из примера 12 и провести ее запускииз одной точки, но при разных алгоритмах прямого поиска; исследовать влияние параметра  . 3.  задаче из примера 12 добавить условие 1  2  2 и сравнитьрезультаты поиска разными алгоритмами прямого поиска. 4. етодом прямого поиска найти минимумы функции 1  (1   1 21(1,522 при условиях 5  1  5, 4  2  5. 5. оспроизвести программу из примера 14 и исследовать методмоделирования отжига при изменении параметров ,  и начальной температуры. 6. етодом моделирования отжига найти глобальный минимумфункции 2  2 212 1 2      (18  (18 при условиях 0,5    1,   1, 2. ыяснить влияние начальной температуры отжига. ид функции 2 показан на рис. 30. ис. 30. ункция 7. равнить результаты поиска минимума функции 2 методами и  . 100 4.5.    енетический алгоритм использует терминологию, заимствованную из биологии и отличную от стандартных методов оптимизации. птимизируемая функция в генетическом алгоритме называется фитнес-функцией ( . аждой итерации алгоритма соответствует набор точек, образующих популяцию (, а отдельные точки называются особями (. собь представляется вектором (геномом, состоящим из генов. опуляцияпредставляется матрицей с числом строк, равным размеру популяции, и числом столбцов, равным числу переменных. начение фитнесфункции особи есть ее метка (. оследовательности итерацийалгоритма соответствует последовательность популяций, называемыхпоколениями (. опуляция характеризуется разнообразием (, котороеоценивается средним расстоянием между особями популяции. ем онобольше, тем разнообразие выше и тем бльшая область пространствапоиска охватывается популяцией. ля создания нового поколения алгоритм выбирает определенные особи из текущей популяции в качестве родителей ( и использует их для создания индивидуальностей нового поколения, называемых потомками или детьми(. ти действия выполняются специальными операторамигенетического алгоритма.  целом алгоритм включает три этапа: 1. енерация начальной популяции с помощью датчика случайныхчисел. 2. оздание последовательности новых популяций. ля этого накаждом шаге алгоритм использует особи текущего поколения для образования следующей популяции, выполняя последовательно шаги: а помечает каждую особь текущей популяции посредством вычисления значения фитнес-функции; б масштабирует полученные метки, преобразуя их к более удобному диапазону значений; в выбирает родителей, основываясь на их фитнес-функциях; г несколько особей с более низкими значениями фитнеса, какэлитные, переводит в новую популяцию; 101 д порождает из родителей потомков путем случайных измененийу одного из родителей (мутация,  или комбинируя гены пары родителей (скрещивание,  е заменяет текущую популяцию потомками, формируя следующее поколение. 3. авершение алгоритма при выполнении критерия останова. ассмотрим более полно эти этапы и реализующие их функции. ачальная популяция определяется ее размером ( , который по умолчанию равен 20, и диапазоном ( , поумолчанию равным 0; 1. одробнее об этих и других параметрах сказано ниже. бычно в качестве родителей выбираются особи, имеющие лучшие значения фитнес-функции. днако можно задать другую функциюотбора родителей, указав ее как значение параметра (прил. 6. ак следует из описания этапов, алгоритм использует три способаполучения потомков: элитизм, скрещивание пар родителей и мутациюодного из родителей. ри скрещивании по умолчанию в каждую позицию (локус потомка переносится ген из той же позиции одного из родителей, выбранного случайно (равномерный кроссовер. утация поумолчанию выполняется добавлением к вектору родителя случайноговектора с гауссовским распределением.  качестве критериев остановки применяются следующие условия:  превышено заданное число поколений (параметр ,  исчерпан лимит времени поиска ( ,  значение фитнес в лучшей точке не больше  ,  средневзвешенное изменение значения фитнеса на ряде поколений(  меньше допустимости ( ,  нет улучшения функции в течение интервала времени    (с. аметим, что генетический алгоритм может решать задачи, содержащие границы переменных, линейные и нелинейные ограничения. ри этом используется подход, аналогичный рассмотренному в методе  (     (, т.е. нелинейные ограничения вводятся в функцию агранжа, которая минимизируется  при выполнении условий102 по границам и линейным ограничениям. арушение нелинейных ограничений сопоставляется с параметром    (по умолчанию 1е-6. енетический алгоритм реализован в функции , а для заданияпараметров алгоритма используется функция . сли ввести в командную строку  (, то будет создана структура параметров, имеющих значения по умолчанию. ля изменения параметров каждый параметр указывается в видепары имя, значение как аргументы функции . се параметры генетического алгоритма, их смысл и значения по умолчаниюприведены в прил. 6. ажным параметром алгоритма является размер популяции(, его значением может быть целое положительноечисло или целочисленный вектор. о втором случае будет созданостолько подпопуляций, какова размерность вектора, а размер подпопуляций будет равен значениям компонент вектора. араметр  задает тип данных популяции, егозначениями могут быть: ,  (оба при отсутствии ограничений,  (по умолчанию. ледующим параметром популяции является , который определяет функцию, создающую начальную популяцию. предлагает три варианта функций: 1 равномерная (, создающая случайнуюначальную популяцию с равномерным распределением, используетсяпо умолчанию при отсутствии границ или ограничений; 2 допустимая популяция (, создающая случайную начальную популяцию, удовлетворяющую всемграницам и линейным ограничениям, используется по умолчанию приналичии таких ограничений; 3  (собственная, написанная пользователем и генерирующая данные, тип которых должен соответствовать определенномув .  последнем случае функция задается в опциях как  (, 103 где   имя собственной функции, первая строка определениякоторой имеет вид   (, , ,где   число независимых переменных,   фитнес-функция. ожно задать начальную популяцию или ее часть, указав массив, ее содержащий, в параметре . ри этомчисло строк массива не должно превышать значение параметра, а число столбцов равно числу переменных. едостающие особи будут созданы стандартной функцией.  параметре можно указать диапазон значений переменных в начальной популяции в виде вектор-столбца или матрицы с двумя строками ичислом столбцов, равным числу переменных. о умолчанию этот параметр равен 0;1, т.е. для всех переменных установлен диапазон от 0 до 1. еред применением оператора выбора алгоритм масштабируетфитнес для удобства выполнения выбора. о умолчанию применяетсяранговая функция масштабирования , которая лучшиминдивидуумам присваивает ранг 1, следующим 2 и т.д. араметром можно задать другой вид масштабирования: пропорциональное (, основанное на лучших особях(, смещенное линейное (, или написать собственную функцию. ля выбора родителей алгоритм предлагает несколько функций. о умолчанию выбор реализует стохастическая функция.  ней используется линия (аналог рулетки, разбитая на участки, длина которых пропорциональна масштабированному качеству особи. доль линии выполняются шаги одинаковогоразмера. ыбирается родитель из участка, на котором завершен очередной шаг. ервый шаг равен равномерному случайному числу, меньшему заданного размера шага. зменить функцию выбора можно заданием ее имени в значении параметра . ополнительно имеются следующие функции:  ункция остатка , которая число родителей от одной особи берет равным целой части масштабированной целевой функции, а недостающие родители выбираются стохастически свероятностью, пропорциональной дробной части. 104  ункция равномерности (однородности ,рекомендуется только на стадии отладки или испытаний.  ункция рулетки , использующая модельрулетки, размер секторов которой пропорционален качеству особей. ыбирается родитель сектора, на который выпало случайное число.  урнирная функция , реализующая метод турниров. лучайно выбираются несколько особей, и родителемстановится лучшая из них. о умолчанию число выбираемых особей, т.е. размер турнира, равно 4. азмер не должен быть меньше 2, а изменить его можно в опциях  (,... ,, где   размер турнира. роме того, пользователь может написать собственную функциювыбора. ри этом заголовок функции, например с именем , должен иметь вид   (, , , где   ожидаемое число детей для каждой особи популяции,   число выбираемых родителей. ункция выборавозвращает родителей в виде вектор-строки длиной , содержащей индексы родителей. оздание детей для нового поколения регулируется двумя параметрами:  определяет число элитных особей, которые гарантированно переходят без изменений в новое поколение, по умолчаниюоно равно 2;  устанавливает долю нового поколения, порождаемую кроссовером (по умолчанию 0,8. правление мутацией, т.е. созданием детей внесением в индивидуумы малых случайных изменений, обеспечивает параметр. н задает функцию мутации, которой может быть:  , устанавливаемая по умолчанию. на ккаждому гену родителя добавляет случайное число, взятое из распределения аусса со средним 0 и дисперсией, определяемой параметрами и  (по умолчанию они равны 1. зменить их можно, задав конкретные значения в опциях:   (,... ,,. 105   производит мутацию в два шага. началавыбирается часть генов особи, каждый ген которой может мутироватьс вероятностью , по умолчанию равной 0,01. а втором шаге выбранный ген заменяется случайным числом с равномерным распределением из диапазона значений данного гена. зменить вероятность можно в опциях  (, , .   генерирует случайные направления, адаптированные к прошлым результатам генерации. лина шагавдоль каждого направления выбирается так, чтобы соблюдались линейные ограничения и границы на переменные.  обственная функция мутации, заголовок описания которойимеет вид   (, , , , , , , где   вектор-строка родителей, отобранных функцией выбора;   число переменных;   структура, содержащая информацию о текущем поколении;   вектор меток (фитнес текущей популяции;   матрица особей текущей популяции. ункции мутации возвращают потомство (детей от мутации в видематрицы, строки которой соответствуют детям, а столбцы переменным. еперь остановимся на функциях кроссовера. о умолчанию установлена функция , соответствующая рассеянному кроссоверу. на формирует случайный бинарный вектор (шаблон с размерностью хромосомы, и если в его позиции стоит 1, то в этуже позицию потомка помещается соответствующий ген первого родителя, иначе берется ген второго родителя. араметром можно установить следующие функции: , реализующую одноточечный кроссовер. о случайному числу находится точка разбиения хромосомы, иродители обмениваются подстроками генов.  , соответствующую двухточечному кроссоверу. ыбираются два неравных целых числа, определяющих точкиразбиения, и родители обмениваются генами, расположенными междуэтими точками. 106   создает потомков взятием взвешенного среднего родителей. еса задаются параметром  в виде скаляра или вектора с длиной, равной числу переменных (по умолчаниюединичная вектор-строка. ункция образует детей по формуле  1      ( 2 - 1. начение  можно изменить при задании функции, указав егопосле ее имени.   возвращает потомка, образуемого поформуле  2    (1 - 2, где 1  родитель с лучшей фитнес-функцией,   параметр определяет близость потомка к родителям. ем ближе  к 1, тем ближе потомок к лучшему родителю. о умолчанию   1,2, а изменить его можно при задании кроссовера.   создает детей, которые являютсясредним арифметическим двух родителей. ри этом дети всегда удовлетворяют линейным ограничениям и границам.  обственная функция кроссовера (.  1-й строке ее определения с именем  следует записать  (, , ,... , ,, где   возвращаемый аргумент в виде матрицы, строки которой являются потомками,   служебное слово, означающее, что фиксация позиции не используется. сли популяция представлена подпопуляциями, то имеет местодвижение особей между ними (миграция. учшие особи из однойподпопуляции замещают худшие в другой путем копирования. роцесс миграции управляется тремя параметрами: 1 направлением (, которое может иметьзначение , определяющее движение от -й к   1-й подпопуляции, и , когда особи -й подпопуляции мигрируют в   1-юи в   1-ю подпопуляции; 2 интервалом (, которым задается числопоколений, через которое происходит миграция; 3 долей мигрирующих особей (, котораяотносится к меньшей подпопуляции (при размерах подпопуляций 20 и50 и доле 0,1 число мигрантов составит 2. 107 ри решении задачи с нелинейными ограничениями алгоритм использует значения двух параметров: 1 начальный штраф ( устанавливает начальноезначение параметра штрафа в функции агранжа; 2 коэффициент штрафа ( увеличивает параметрштрафа для достижения заданной точности и выполнения ограничений; оба параметра должны быть не меньше 1. араметры алгоритма  и  определяют один из способов оценивания фитнес-функции и функции ограничений: последовательный, параллельный или векторный. ля указания функций вывода и графики используются параметры и . оответствующие стандартные функцииприведены в прил. 6. ри написании собственной функции графикипервая строка должна быть следующей:    (, , , где   структура состояния, содержащая поля:   популяция текущего поколения,   метки текущей популяции,   номер текущего поколения,   время старта алгоритма,   описание причины останова,   индексы особей элитных, полученных кроссовером имутацией,   ожидание выбора особей,   вектор с лучшими значениями меток в каждом поколении,   поколение, на котором произошло последнееулучшение фитнес-функции,   время, на котором произошло последнее улучшение,   нелинейные неравенства, если они есть в задаче,   нелинейные равенства, если они есть в задаче;   индикация текущего статуса алгоритма:   начальнаястадия,  алгоритм работает,   промежуточнаястадия,   алгоритм завершен. 108  описании функции вывода данных каждой итерации перваястрока имеет вид,,  (,... ,,, где   флаг индикации изменения параметров,   факультативный параметр интервала. рименение генетического алгоритма зависимости от того, какие принимаются параметры, вида ограничений задачи и желаемых выходных данных используется один изприводимых ниже вариантов вызова функции  генетического алгоритма.   (,   (,,,   (,,,,,   (,,,,,,,   (,,,,,,,,   (,,,,,,,, ,...    ( ,  (... ,,  (.... десь   имя фитнес-функции, например ,  число переменных,  равен целому от 1 до 4, когдаостанов происходит по достижении одной из заданных точностей, и от0 до 5, когда исчерпывается один из заданных лимитов или не найдено допустимое решение; смысл остальных аргументов был приведенпри описании других функций. ще один вариант вызова функции,,,  (... приводит к возвращению также и структуры , содержащей поля:   состояние генератора случайных чисел непосредственно перед стартом алгоритма; для повторного воспроизведения результата решения его можно восстановить;   число полученных поколений;   число вычислений фитнес-функции;   содержит причину останова алгоритма;   значение максимального нарушения ограничения. 109 ополнительные выходные данные о решении можно получить, применив форму вызова,,,,,  (..., при которой функция возвращает матрицу конечной популяции ( и вектор ее оценок (. ри каждом старте алгоритма создается новая начальная популяция. ногда для улучшения результата желательно в качестве начальной популяции использовать конечную популяцию предыдущего запуска. ля этого следует сохранить конечную популяцию с именем, например , указав его в качестве четвертого выходного аргумента вызываемой функции,,,,(, и затем указать это имя в параметре начальной популяции. чевидно, что аналогично можно использовать и новую конечную популяцию впродолжение поиска лучшего решения. ример 15. енетическим алгоритмом найти минимум функции   3(1  12 ( 21  (2  12  10( 15  31   52   ( 21   21    13 ( (1  12  22   при условиях3    3,   1, 2. та функция ранее была представлена в файлах  и 1. ля наглядного представления нескольких поколений напишем собственную функцию графики 1:   1(, ,         (.(:,1,.(:,2,...   ;      .1  (.(:,1,.(:,2,...  .;     .2  (.(:,1,.(:,2,...  .;   110   .20  (.(:,1,.(:,2,...  .;       (.(:,1,.(:,2,...  ;    римем размер популяции 10 и составим и исполним следующуюпрограмму:  (,1,,10; ,,,(,2,,,,,-3 -3,3 3,, ,(-3:0.03:3;1(,;(,,,20; (1;(2;  :         ..    -1.3448 0.2054   -3.0498   1   :  : 11  : 51 : 520 : 186  : 0 олученные результаты показывают, что за 51 итерацию, в течение которых целевая функция вычислялась 520 раз, найден минимум, оказавшийся локальным. а рис. 31 представлено расположение особей в четырех итерациях: черными кружками  начальная популяция, зелеными ромбиками  особи первого поколения, синими  второгопоколения, лазурными  20-го поколения и красными снежинками  финальная популяция. идно, что уже 20-е поколение располагаетсяблизко к локальному минимуму, а особи конечной популяции настолько близки друг к другу, что слились в одну точку. а первых итераци-111 ях хорошо видно, что по крайней мере две особи смежных поколенийсовпадают, что обусловлено использованием элитизма (по умолчаниюдве особи элитные. обавим в программу обращение к стандартной функции графики и повторим ее исполнение:   (,,1, ,10; ,,,(,2,,,,,-3 -3,3 3,, ,(-3:0.01:3;1(,;(,,,20; (1;(2; ис. 31. оиск минимума функции  генетическим алгоритмомезультаты выполнения этой программы представлены на рис. 32 и в следующем отчете:  :         ..    -1.3448 0.2054   -3.0498   1   :  112 : 11  : 51 : 520 : 186  : 0 атраты на поиск того же локального минимума не изменились, ноизменилось расположение поколений, кроме конечного (см. рис. 32. а верней части рис. 32 показано изменение двух показателей поколения за весь процесс поиска: среднего в поколении значения фитнесфункции и ее лучшего значения в поколении. орошо видно, что минимум получен за 30 поколений, а остальные поколения потребовалисьдля доводки точности и достижения условия останова. ис. 32. оиск минимума целевой функции при двух функциях графикиопробуем найти глобальный минимум дополнительными повторными исполнениями программы. олько на пятой попытке получен искомый результат, о чем свидетельствуют нижеприводимый отчетпрограмы (рис. 33:  (,1,,10; ,,,(,2,,,,,-3 -3,3 3,, 113 ,(-3:0.03:3;1(,;(,,,20; (1;(2;  :         ..    0.2372 -1.6268    -6.5503    1   :  : 11  : 57 : 580 : 186  : 0 ля достижения глобального оптимума в точке (0,2372 1,6268 созначением функции цели 6,5503 потребовалось сгенерировать 57 поколений и 580 раз вычислить фитнес-функцию. ис. 33. асположение особей поколений при нахожденииглобального минимума114 ример 16. ешить задачу из примера 15 при дополнительном линейном ограничении0,91  2  1,2. ля этого в программу из примера 15 добавим значения входныхаргументов: матрицу   0,9 1 и вектор   1,2. осле удачной попытки выполнения программы получили (,1,,10; ,,,(,2,0.9 -1,1.2,,,-3 -3,3 3,, ,(-3:0.03:3;1(,;(,,,20; (1;(2;(-2 3,-3 1.5,-,,2.3;  :         ..    -0.3269 -1.4941    -3.4532    1    :   : 11   : 62  : 630  : 186   : 0 ак следует из рис. 34, генетический алгоритм нашел условныйглобальный минимум, который расположен на границе допустимойобласти в точке (0,3269 1,4941 и имеет значение 3,4532. ля этогопотребовалось 62 поколения популяций и 630 вычислений целевойфункции. 115 ис. 34. оиск минимума функции при линейном неравенствеример 17. енетическим алгоритмом найти глобальный максимум функции 2 2 4 4 1 12 1 2 2 44 (1 20,25(   (2 (0,5 0,5 ( 1 1 12 1,5 (0,5 0,5 ( 1                  при условиях0  1  4, 0  2  3. та функция представлена -файлами 1 и 1 (см. пример 14, а ее трехмерный вид показан на рис. 28. ешение находим, исполнив программу (,1,,10; ,,,(1,2,,,,,0 0,4 3,, ,(0:0.02:4,0:0.02:3;1(,;(,,,20; (1;(2;  :         ..    0.9734 0.9732   116  -1.4979    1    :   : 11   : 96  : 970  : 186   : 0 ис. 35. оиск глобального максимума функции1 алгоритмом а рис. 35 хорошо видно, что последнее поколение особей находится в окрестности глобального максимума. есмотря на наличиегребня, максимум локализован достаточно точно: координаты оптимума (0,9734, 0,9732  близки к точным (1 1, а значение целевой функции в нем 1,4979 практически равно точному 1,5. 4.6. равнительная характеристика решателейффективность методов оценивается скоростью сходимости.  и  дают быструю сходимость к локальному оптимуму гладкой задачи благодаря использованию производ-117 ных. ля  доказана сходимость к локальному экстремуму, но скорость сходимости ниже, чем у методов, использующихпроизводные. ля генетического алгоритма сходимость не доказана. ходимость к глобальному оптимуму доказана для для задач с границами на переменные при условии очень медленногоохлаждения, т.е. низкой скорости. бласть применения решателей в зависимости от типа задачи испособа вычислений представлена в следующей таблице. ель и способвычислений ладкие функции егладкие функциидно локальное решение ункции  , , , , ного локальныхрешений, дно глобальноерешение -, , , , , дно локальное решениес распараллеливанием, функции  , ного локальных решенийс распараллеливанием дно глобальное решениес распараллеливанием ,  абораторная работа  5 енетический алгоритмадания: 1. своить схему генетического алгоритма и назначение основныхпараметров популяции, алгоритма и функций графики, понять работуфункций отбора, кроссовера и мутации. 2. рименить генетический алгоритм к функции 1 наобласти 3    4,   1, 2 с целью нахождения глобальных максимумов при нескольких размерах популяции. 118 3. айти глобальный максимум функции . остроить зависимость оптимального значения целевой функции от доли кроссоверапри одном размере популяции. ля получения соответствующих данных можно применить цикл;  0.05:.05:1    (,, ;   (,;    ; ;  4. айти глобальный максимум функции  в границах 3    3,   1, 2 и при дополнительных ограничениях 41  52  7, 31  42  9 при нескольких значениях числа элитных особей. 5. сследовать влияние вида кроссовера (из числа стандартных на поиск минимумов функции 2 212 1 2         (8  (8 1 2 ( 0,5       при условиях 0,5    1,   1, 2. 6. акультативно: исследовать эффективность генетического алгоритма на тестовой многоэкстремальной функции астригина второгопорядка 2 212 1 2      20 10((2  (2     при условиях 1    1. 7. акультативно: написать собственный кроссовер и опробоватьего на многоэкстремальной функции. 119 5.  о многих прикладных задачах оптимизации цель описывается неодной, а несколькими функциями (критерями, и в этом случае говорято векторной оптимизации. ри этом оптимальное решение такой задачи в традиционном понимании не имеет смысла. ицо, принимающеерешения (, стремится найти некоторое компромиссное по целевым функциям решение, удовлетворяющее его субъективным представлениям (предпочтениям о желаемом результате.  теории многокритериальной оптимизации показано, что искать компромиссное решение следует только среди паретовских решений. ешение  оптимально по арето, если не существует другого допустимого решения , в котором значение хотя бы одного критерия было лучше, адругих не хуже, чем в . наче говоря, паретовские решения являютсянедоминируемыми ( или неулучшаемыми. етоды многокритериальной оптимизации ориентированы на предоставление паретовских или, по крайней мере, слабопаретовских решений. ижерассматриваются функции , реализующие некоторые из таких методов. 5.1. ункция  та функция входит в состав пакета  . напытается создать множество парето-оптимальных решений минимизацией многомерной целевой функции. опускается наличие границ напеременные, а также линейных неравенств и равенств, но нелинейныеограничения неприемлемы. ля минимизации используется контролируемый генетический алгоритм с элитизмом, его отличие от  невелико. лгоритм с элитизмом всегда предпочитает особи с лучшим значением фитнес-функции (ранга, а при контролируемости предпочитаются также особи, которые могут помочь в увеличении разнообразияпопуляции, даже если они имеют более низкие значения фитнеса. азнообразие особей улучшает сходимость к множеству арето, онообеспечивается контролем числа элитных особей. ля этого используются два параметра, отличных от имеющихся в . араметр ограничивает число особей на границе арето(элитных членов, определяя долю популяции на лучшей границе арето, удерживаемую в процессе оптимизации. ри одной границе а-120 рето этот параметр игнорируется. торой параметр, , задает функцию расстояния, способствующую созданию разнообразия награнице посредством предпочтения особям, которые относительно далеки от границы арето. зменение параметров  выполняется через функцию. ольшинство параметров  и  идентичны(прил. 6. ва отличительных параметра упомянуты выше. араметр определяет функцию, которая задает меру расстояния между особями. роме того, для отображения границы аретов случае двумерной целевой функции, т.е. зависимости между функциями на найденном множестве арето, имеется функция графики, устанавливаемая параметром . тметимдругие отличия от алгоритма . режде всего обратим внимание нато, что способ отбора родителей не может быть выбран: используетсятолько турнирный вариант, причем число турниров должно быть равночислу целевых функций. пределение элитных особей обеспечиваетсясортировкой популяции, при которой недоминируемые особи размещаются выше доминируемых.   отсутствует выборфункции масштабирования, а в качестве непустого значения  может быть только функция , о которой речьпойдет в следующем разделе. аконец, в рассматриваемом алгоритмене используется параметр времени , исчерпание которого приводит к остановке . ри применении  сначала устанавливаются необходимые значения параметров, и затем вызывается сама функция. ак идля других функций оптимизации, имеются разные варианты вызова , зависящие от описания решаемой задачи (перечня входных аргументов и требуемых результатов (выходных аргументов. интаксис вызовов  в командном окне представлен ниже.   (,   (,,,   (,,,,,   (,,,,,,,   (,,,,,,,... ,   ( ,  (... ,,  (... 121 ,,,  (... ,,,,  (... ,,,,,  ... (..., где   векторная фитнес-функция,   множество локальных паретовских решений в виде матрицы с числом стобцов, равнымчислу переменных, и числом строк, равным числу решений,   матрица значений целевых функций в  (число столбцов равно числуцелевых функций,   содержит признак завершения алгоритма: 1  среднее изменение размаха множества арето за поколений меньше , 0  прошло максимальное число поколений, -1  остановлено  или  функцией, -2  не найдено допустимой точки, -5  исчерпан лимит времени,   конечная популяция,   значения целевых функций в конечной популяции; остальные аргументы описаны в предыдущих разделах. ассмотрим примеры применения  для приближенного нахождения множества арето. ример 18. айти и построить множество арето для двухмерной целевойфункции42 421 1 21 2 2 21         (1  (  ; (4  (  .     ля решения задачи фитнес-функцию представим в виде -файла:    (; (1(1-(14((2-(12; (2(4-(24((2-(12;  а для графических построений запишем два -файла: 1 и 2. оставим программу, в которой все параметры установлены поумолчанию и только размер популяции увеличим до 70. роме того, предусмотрим построение линий уровня функций с последующим нанесением получаемых генетическим алгоритмом точек и точного мно-122 жества арето, а также отображение зависимости между целевымифункциями в окрестности арето (границы арето.  итоге приходимк следующей программе решения задачи: (,70; ,(,2,,,,,,,... ; (:,1;(:,2;(,,.; ; ,(0:0.05:5;1(,; (,,,0.03 0.2 0.5 0.7 1 2 3 6 9 15 25 40... 55 80 115,;  ; ,(0:0.05:5; 2(,; (,,,0.01 0.05 0.1 0.3 0.6 1 2 3 6 9 15 20... 26 35 52 75 100 130,;  1,1;  1.1:.1:3.9  ;,(((,,1,4;   ;4,4; ;  ((:,1,(:,2,-;    (1; (2; ;((:,1,(:,2,; ; (1;(2;  процессе выполнения этой программы выдавались значения целевых функций особей поколений, а в завершение  сообщение о причине останова алгоритма:  :           .. о удобнее получить результаты в компактном виде, для чего исполним команду ,    1 2 1 2 обозначения столбцов вписаны автором  1.0078 1.0078 0.0000 80.1648  3.9370 3.9270 74.4067 0.0001  3.9726 3.9687 78.0856 0.0000  1.4641 2.1668 0.5402 11.7872  1.1310 1.1169 0.0005 69.0963  4.0288 4.0280 84.1553 0.0000 123  3.8881 3.8993 69.5701 0.0002  1.3991 1.7692 0.1623 24.9025  1.2630 1.3006 0.0062 53.1002  3.6214 3.6942 47.2294 0.0140  1.0399 1.0232 0.0003 78.5203  3.7828 3.8391 59.9763 0.0038  1.1747 1.1992 0.0015 61.5333  3.0694 3.5207 18.5429 0.2565  3.8449 3.8286 65.5032 0.0011  3.3862 3.5866 32.4608 0.0694  2.6681 3.3464 8.2021 0.6426  1.0078 1.0078 0.0000 80.1648  1.3987 1.6935 0.1122 28.3888  3.7134 3.7551 54.2090 0.0053  3.4833 3.5882 38.0383 0.0398  1.4262 2.0792 0.4594 14.0397  1.9411 2.5784 1.1906 4.4903  3.2271 3.4262 24.6421 0.1480  1.3915 1.4790 0.0312 40.3978 з этих данных следует зависимость между целевыми функциямивблизи границы арето, показанная на рис. 36. ы видим, что присмещении вдоль границы арето на малое расстояние от минимумаодной из функций значение этой функции резко возрастает. оэтомуобласть приемлемых по обеим функциям решений очень узкая, а чувствительность функций к малым изменениям решения высокая. а рис. 37 представлены контуры функций, на их фоне краснымиромбиками показаны полученные точки, а сплошной черной кривой  точное множество арето. чевидно, что найденные точки лишь приближенно выделяют окрестность множества арето, причем болееточно вблизи экстремумов функций. ри двух гладких целевых функциях касательные к линиям уровня обеих функций в точках арето совпадают (это точки касания линий уровня и, следовательно, градиенты функций лежат на однойпрямой, но направлены противоположно. 124 ис. 36. ависимость между целевыми функциямив окрестности границы аретоис. 37. риближенное и точное множество арето в примере 18 125 то свойство использовано при построении точного множестваарето и отражено в функции , включенной в вышеприведенную программу.    ( 1-4(1-(13-2((2-(1;  2((2-(1; 2-2((2-(1;-4(4-(232((2-(1;      2(11(2-2(21(1;  авенство нулю последнего выражения означает противоположность градиентов, это условие реализовано в программе через функцию нахождения нулей  (см. п. 9.1. ример 19. айти и построить множество арето для двухмерной целевойфункции42 421 1 21 2 2 21         (1  (  ; (4  (      при условии 0,9 1  2  0,5.  программу добавим элементы неравенства и отразим их в аргументах функции: 0,9 1; -0.5; ,(,2,,,,,,,... ; сполнение программы завершается выводом сообщения о причине останова:  :           .. езультаты получаем выполнением команды ,   126  1 2 1 2 обозначения столбцов вписаны автором  1.6080 2.0703 0.3504 14.0794  1.2965 1.6659 0.1442 29.8177  2.0346 2.9904 2.0593 1.9525  1.8947 2.9204 1.6927 2.4107  1.7055 2.2954 0.5958 8.7901  2.1035 3.0104 2.3054 1.7814  1.5977 2.1671 0.4519 11.6097  2.1407 3.1933 2.8011 1.5315  1.3930 1.7553 0.1552 25.5174  1.6494 2.4291 0.7858 6.6976  1.6126 2.5345 0.9906 5.4628  1.6404 2.1131 0.3917 12.8992  1.7789 2.4984 0.8857 5.6018  1.9928 2.9385 1.8660 2.1638  1.6321 2.0156 0.3067 15.6546  1.6804 2.3968 0.7276 7.1192  2.0511 3.0349 2.1885 1.8354  1.5502 1.9582 0.2581 17.5471  1.3682 1.7308 0.1498 26.6487  1.8161 2.4536 0.8500 6.1247  1.8075 2.7281 1.2726 3.4647  1.4439 1.8010 0.1664 23.5100  2.1047 3.0824 2.4452 1.6648  1.5319 1.8804 0.2015 20.3077  1.4497 1.8216 0.1792 22.6574 рафическое представление зависимости функций показано нарис. 38. е использование позволит  достаточно просто найти наилучшее компромиссное решение. асположение найденных решенийотносительно точного множества арето дано на рис. 39. десь хорошовидно, как на решения повлияло линейное ограничение (граница допустимого множества решений показана малиновой линией. 127 ис. 38. онечное приближение к границе арето в примере 19 ис. 39. риближенное и точное множество арето в примере 19128 5.2. етод достижения цели. ункция ункция , входящая в пакет  , реализует метод достижения многомерной цели (целевого программирования. дея метода состоит в том, что вместо непосредственной минимизации критериев цели ставится задача максимальногодостижения желаемых уровней этих критериев. усть (  (1(, 2(, , (  вектор целевых функций, а  (1, 2, ,   вектор заданных целевых значений, которые желательно достичь. ем меньше разность (  , тем точнее достигается -я цель. ля объединения целей следует использоватьотносительные разности, введя для этого вектор неотрицательных весов   (1, 2,, . бозначив максимальную относительную разность как , приходим к выводу, что для максимально возможного достижения целей необходимо минимизировать . аким образом, задачадостижения цели формулируется в виде  , (    ,   ,   , (  0, (  0,     . ервые  ограничений-неравенств называются целевыми ограничениями, но при задании задачи в  они не входят в число оганичений, так как учитываются внутри алгоритма (в функции качества, подобной штрафной функции. ем ближе вес  к нулю, темжестче целевое ограничение и тем выше требование к точности достижения -й цели. екомендуется устанавливать  равным (, тогда    есть относительная величина отклонения от цели. ледовательно, абсолютное значение  при   0 в оптимальном решении показывает максимальное относительное отклонение от цели среди всех целей. ри отрицательном  значения всех целевых функцийлучше их целевых значений, а при положительном  значение по крайней мере одной целевой функции больше цели. елевые функции, покоторым целевые ограничения обращаются в равенства (они опреде-129 ляют , называются активными. ерез задание   может оказывать влияние на степень достижения той или иной цели. ункция  использует метод последовательногоквадратичного программирования ( с модификацией в части линейного поиска и гессиана.  линейном поиске применяется функциякачества вида1( ,  0, (   ,            а при действиях с гессианом учитывается его особая структура (нули встроках и столбцах, ассоциированных с переменной . аметим, что функция  ориентирована на задачи снепрерывными целевыми функциями. озможно получение решения ипри нарушениях непрерывности, если они не будут проявляться в точках, из которых делается шаг вперед. етод достижения цели дает локальный результат. ешение задачи рассматриваемым методом начинается с установки желаемых параметров. ля этого применяется функция . раткое описание всех параметров  и их значения поумолчанию приведены в прил. 7. становимся лишь на некоторых. сли каких-либо целей требуется достичь максимально точно, соответствующие целевые функции размещают первыми в описании(-файле многомерной цели, а параметру  придают значение, равное числу точных целей. апример, запись в командной строке  (,2;реализует требование, чтобы первые две цели достигались с максимально возможной точностью. араметры  и  устанавливают в , когда градиенты целевых функций и нелинейных ограничений задаютсяаналитически. ри наличии нелинейных ограничений нельзя задатьградиенты только целевых функций или только ограничений, так как вфункции качества они представлены вместе. радиент многомернойцели  это матрица, в которой каждый столбец есть градиент одной целевой функции (частные производные по всем переменным. ля ограничений имеем две матрицы, отдельно для неравенств и равенств.  каждой из них столбец матрицы содержит градиент соответствующей левой части ограничения (( или (. налитическое заданиеградиентов ускоряет процесс решения, в противном случае все произ-130 водные вычисляются одним из методов конечных разностей, определяемым параметром . апомним, что при аналитическом задании градиентов они описываются в одном -файле с самойцелевой функцией или функциями ограничений. интаксис  зависит от модели задачи и описаниярезультата решения.   (,0,,   (,0,,,,   (,0,,,,,,   (,0,,,,,,,,   (,0,,,,,,,... ,,   (,0,,,,,,,... ,, ,    ( ,  (... ,,  ( ,,,  (... ,,,,  ... (... ,,,,,  ... (...мысл входных аргументов очевиден. аметим, что функция наряду с целевыми функциями может включать и градиенты. очнотак же функция  может содержать помимо функций нелинейных ограничений и их градиенты. начения целей , как и начальную точку 0, задает , а веса  первоначально берут равными абсолютным значениям целей. ргумент  обязателен, если изменены какие-либо параметры через , при этом дляотсутствующих аргументов устанавливается значение . ыходные аргументы  и  содержат решение и вектор значений целевых функций. ргумент   это , величинакоторого показывает относительное отклонение от цели, лимитирующей дальнейшее повышение точности. ричина остановки алгоритмасодержится в : 1  установлена сходимость, 4  величина направления поиска меньше допустимой и нарушение ограничений меньше допустимого , 131 5  величина производной по направлению меньше допустимой инарушение ограничений меньше допустимого , 0  число итераций или число вычислений функции превысиломаксимально установленное, 1  алгоритм остановлен функцией вывода, 2  не найдено допустимой точки. труктура  содержит поля:   число итераций,  число вычислений функции,   размер шага линейного поиска,   конечное смещение по ,   примененный алгоритм,   мера оптимальности первого порядка,   максимум функцийограничений,   конечное сообщение. оследний выходнойаргумент  содержит значения множителей агранжа по всемограничениям: , , , , , . ример 20. ри двух целевых функциях42 421 1 21 2 2 21         (1  (  , (4  (      и при условии 0,9 1  2  0,5 достигнуть целевых значений 1   1,5, 2  3. оставим -файл для вычисления целевых функций и их градиентов:  ,  1(; (1(1-(14((2-(12; (2(4-(24((2-(12; -4(1-(13-2((2-(1 -2((2-(1;  2((2-(1 -4(4-(232((2-(1;  ачнем поиск решения с начальной точки (3 3 и весов, равныхцелям. редварительно укажем на использование в вычислениях аналитических выражений целевых функций.  итоге последовательностькоманд имеет вид 03 3;  0.9 -1;  -0.5;  1.5 3; ; 132  (,; ,,,,(... 1,0,,,,,,,,,,  результате их выполнения получаем   1.8671 2.8083    1.4512 2.9025    -0.0325    4    : 8  : 40  : 1  : 4.9593-007  :   , -,   :   : 5.7775-007  : 1771  ешение получено за восемь итераций комбинацией трех алгоритмов. оставленные цели превышены: значения обеих целевых функций меньше целей. б этом же свидетельствует отрицательное значение аргумента  (. еперь добавим требование точного достижения первой цели(,,,1; сполнение команд дает   1.7778 2.8427    1.5000 2.9277    2.5824-023    4    : 9 133  : 44  : 1  : 6.5882-012  :   , -,   :   : 5.0931-012  : 1771  ак видим, первая цель достигнута точно. начение первой целевой функции на очень малую величину больше 1,5, поэтому  оказался положительной, но практически равной нулю величиной. ри этом и вторая цель достигается с большей точностью. ример 21. ри трех целевых функциях42 4 2 421 1 21 2 1 21 3 2 21             (1  (  , (5  (2,5  , (4  (         достигнуть целевых значений 1  15, 2  13, 3  19. апишем -файл функций:    2(; (1(1-(14((2-(12; (2(5-(14(2.5(2-(12; (3(4-(24((2-(12;  ыполним команды 01 3;15 13 19; ; ,,,,(2,0,,    3.0506 1.8147    19.2103 16.6489 24.3330    0.2807    4   : 7 : 28 : 1 : 1.1515-007 :   , -,  134  :   : 2.6497-007  : 1771  ак видно из полученного отчета, значения всех целевых функцийбольше желаемых, максимальное отклонение составляет 28  (см. . ри этом все целевые ограничения оказались активными, что является признаком недоминируемости полученного решения. тремясь улучшить значения первых двух целевых функций, введемопцию ,2. осле выполнения измененнойпрограммы имеем   3.0506 1.8147    19.2103 16.6489 24.3330    0.2807 ешение не изменилось, т.е. повысить точность достижения двухцелей таким путем не удалось. опробуем улучшить только первуюцель, задав  равным 1. сполнение командпоказало, что и в этом случае решение не меняется. огда проверимвлияние весов: изменим вес 1-й цели с 15 до 5, оставив остальные весабез изменения, и исключим .  01 3;15 13 19; 5 13 19; ,,(2,0,,.  результате выполнения этих команд получаем   2.9863 1.7553    17.0805 18.4092 26.9058    0.4161 аким образом, уменьшение веса первой цели привело к лучшемузначению первой целевой функции, но это стало возможным за счетухудшения двух других функций. нтересно отметить, что в полученном решении все целевые ограничения снова оказались активными(все отклонения равны . то позволяет утверждать, что решение является паретовским по функциям, являющимся относительными отклонениями при данных весах. 135 5.3. ункция торой метод решения многокритериальной задачи заключается вминимизации наибольшего значения из всех целевых функций. нреализован в функции  и предназначен для решения задачвида  (   ,   ,   , (  0, (  0,     . ритерий в представленной форме не является гладким, что вызывает большие трудности. оэтому в алгоритме исходная задача сначала преобразуется в обычную общую задачу нелинейного программирования добавлением неравенств (   и переходом к минимизации .  результате получается частный случай задачи достижения цели, когда все целевые значения равны 0 и все веса равны 1. алее новая задача решается алгоритмом последовательного квадратичного программирования ( с теми же модификациями, что и в функции. ля установки значений параметров, отличных от принятых поумолчанию, применяется та же функция . писок параметров функций  и  отличается только одним параметром (см. прил. 7. место параметра  в добавлен параметр . го значение, которое неможет быть больше числа целевых функций, показывает число целевых функций, по которым при минимизации берутся их абсолютныезначения. акие функции в -файле должны находиться перед остальными. ак и в предыдущем методе, при наличии нелинейных ограничений использовать аналитические выражения градиентов имеетсмысл только в случае их задания как для целевых функций, так и длянелинейных ограничений. интаксис обращения к функции  представляется в разных вариантах в зависимости от числа входных и выходных аргументов. 136   (,0   (,0,,   (,,,,,   (,,,,,,,   (,0,,,,,,,   (,0,,,,,,,,   ( ,  (... ,,  (... ,,,  (... ,,,,  (... ,,,,,  (... бозначения входных аргументов и их смысл описаны в предыдущих главах. ак и раньше, целевые функции должны быть непрерывными. се выходные аргументы и их содержание идентичны такимже в функции , за исключение аргумента , который содержит максимальное значение из всех целевых функций в полученном решении (значение . езультатом решения может быть локальный минимум. ример 22. айти решение, минимизирующее максимальное значение четырех функций2 21 12 1 22 22 123 124 12(  2 48 40 304,( 3 ,(  3 18,( .                начала записываем функции в -файл:  ( (12(12(22-48(1-40(2304; (2-(12-3(22; (3(13(2-18; (4-(1-(2;  атем обращаемся к функции  00.2 0.1;... ,,(,0 и получаем результаты решения: 137   .  .    8.8458 1.0746    -5.9305 -81.7118 -5.9305 -9.9204    -5.9305 чевидно, что значения целевых функций сильно отличаются поабсолютной величине: размах 81,7118  5,9305  75,7813. сли желательно уменьшить эти различия, то можно, например, потребовать, чтобы в минимизации участвовали абсолютные значения первых трехфункций. то требование выражаем через параметр , присваивая ему значение 3:  0  0.2; 0.1;   (,3; ,,  (,0,,,,,,,,    4.9256 2.0796    37.2356 -37.2356 -6.8357 -7.0052    37.2356 чет нового требования существенно уменьшил разброс абсолютных значений целевых функций (размах уменьшился до 30,4. абораторная работа  6 ешение многокритериальных задачадания: 1. ассмотреть особенности решения многокритериальных задач. яснить смысл решения, множества и границы арето. 2. айти множество и границу арето для двух функций без ограничений: 4 2 4 221 1 1 12 2 1 24 22 42 2 1 2 1 12(  10 ,( .                138 3. сследовать влияние на решение п. 2 значений параметра и размера популяции, а также смены кроссовера(факультативно. 4. овторить п. 2 при условии 231  2  3. 5. айти решение по функциям из п. 2 при заданных целевых значениях 30 и 4. опытаться достигнуть точно одну из этих целей. овторить для целевых значений 25 и 10. 6. айти решение по функциям из п. 2 с помощью . овторить при требовании минимизации максимальных абсолютных значений. 7. айти решение для целевых функций из примера 22 с наименьшим размахом абсолютных значений всех функций. 139 6.  .  сли целевая функция и все функции ограничений задачи линейные относительно , а переменные  непрерывны, имеем задачу линейного программирования. ункция  предназначена для решения линейных задач общего вида:    ,     ,     ,     , где   вектор коэффициентов целевой функции (линейной формы размерности . ля решения таких задач в функции  имеетсятри алгоритма: один для задач большой размерности (  идва для средних задач ( . лгоритм   реализует прямо-двойственный методвнутренней точки. ажно подчеркнуть, что он ориентирован на задачис разреженными матрицами  и . а предварительных шагах алгоритм выполняет преобразование исходной задачи:  все переменные ограничиваются снизу нулем;  все условия приводятся к равенствам;  фиксированные переменные, равные своим границам, удаляются;  строки и столбцы матрицы ограничений из нулей удаляются;  матрица ограничений приобретает полный структурный ранг;  при значительном числе единичных строк матрицы условий соответствующие переменные вычисляются и строки удаляются. одель преобразованной задачи, являющейся далее прямой задачей, имеет вид   ,     , 0    . осле введения в прямые ограничения переменных , называемых дополнительными или слабыми (, получаем   ,     ,     ,   0,   0. той задаче соответствует двойственная задача    ,        ,   0,   0, где  и   двойственные переменные, а   слабая переменная двойственной задачи. 140 словия оптимальности обеих задач представляют собой системуравенств( , , , ,  0, 0, 0, 0, 0,                                         в которой первые три линейных равенства являются условиями допустимости, а последние два квадратичных равенства  условиями дополняющей нежесткости. умму    называют интервалом (зазором двойственности ( , она характеризует невязку условийдополняющей нежесткости. лгоритм решает одновременно прямую и двойственную задачи, применяя к линейно-квадратичной системе (, , , ,   (  0 ньютоноподобный метод при сохранении положительности , , , и (отсюда название метод внутренней точки. начала алгоритм вычисляет направление предсказания  ((1(, которое является направлением ьютона, затем корректирующее направление  ((1(    ,где   0  центрирующий параметр (подбирается;   вектор из нулейи двух единиц, соответствующих двум квадратичным уравнениям в . овое значение  вычисляется по формуле    (  , где   0  параметр длины шага, выбираемый так, чтобы ; ; ;  0. ри определении направлений используется факторизацияматрицы  (декомпозиция в произведение более удобных матриц. зависимости от свойств матрицы выполняется факторизация по олеску (, ермону  оррисону или . аги повторяются доустановления сходимости итераций. словием останова алгоритма является выполнение неравенства        ,  1,  1,  1,  1, ,                   141 где     ,         ,         невязки уравненийпрямой и двойственной задач и ограничений сверху, а        разность значений целевых функций прямой и двойственной задач,   допустимая величина суммы относительных невязок и разности целевых функций. та сумма  показатель относительной ошибки выполнения условий оптимальности. ля решения задач среднего размера применяются алгоритмы активного набора (- и симплекс (. лгоритм -  это вариант алгоритма последовательногоквадратичного программирования (, используемого в . тличие лишь в том, что критерий линейной задачи не содержит квадратичную форму. а каждой главной итерации -метода решаетсяквадратичная задача с линейной целевой функцией. роцедура решениясостоит из двух фаз. а первой фазе находится допустимая точка (еслиона есть. а второй фазе генерируется последовательность допустимыхточек, сходящаяся к решению. ктивный набор  (строки матрицы  соответствует активным ограничениям в точке решения (точка лежит наих границе.  обновляется на каждой итерации  и используется приформировании базиса для направления поиска. граничения равенствавсегда входят в активный набор. аправление поиска   используетсядля минимизации целевой функции при сохранении активных ограничений. опустимое подпространство для   формируется из базиса , чьи столбцы ортогональны набору  , т.е.    0. аким образом, приминимизации гарантируется сохранение активных ограничений (продвижение идет по границе этих ограничений. атрица  формируется из последних    столбцов матрицы , где   общее число ограничений;   число активных ограничений;   декомпозиция  матрицы : .0            аправление   есть линейная комбинация столбцов  для некоторого вектора :    . одставив   в квадратичную функцию, получаем1 ( , 2             142 где   гессиан;   коэффициенты линейной формы целевой функции. ифференцируя по , имеем( ,            где ( есть проекция градиента целевой функции в подпространстве, определяемом ;      проекционный гессиан. олагая гессианположительно определенной матрицей, что имеет место в , минимум ( находим из условия (  0, которое достигается решениемотносительно  системы линейных уравнений .          чередная точка минимизирующей последовательности находится поформуле1  ,        где  .     сли можно взять , доставляющее минимум целевой функции внуль пространстве  , то это и будет решением квадратичной задачи(. наче  определяется из условия достижения самого близкого изнеактивных ограничений, и это ограничение включается в активныйнабор следующей итерации.  этом случае  вычисляется по формуле(   ,             в которой участвуют только неактивные ограничения и  0.    огда в активный набор включены независимые ограничения, множители агранжа  находятся из системы линейных уравнений.     сли все  положительны, то точка   оптимальное решениеквадратичной задачи. сли же есть отрицательный множитель  и онсоответствует неравенству, то последнее удаляется из активного набора и следует новая итерация. торой алгоритм, используемый для задач среднего размера, реализует хорошо известный симплекс-метод . анцига ( . н описан во всех учебниках по линейному программированию издесь не рассматривается. 143 ля решения линейной задачи с помощью функции  необходимо подготовить исходные данные, представляющие задачу, установить нужные значения параметров или принять их по умолчаниюи вызвать функцию. интаксис обращения к функции  зависит от количества входных и выходных аргументов функции:   (,,   (,,,,   (,,,,,,   (,,,,,,,0   (,,,,,,,0,   ( ,  (... ,,  (... ,,,  (... ,,,,  (... мысл всех входных и выходных аргументов ясен из модели задачии предыдущих разделов. тартовая точка 0 задается только для алгоритма -, другие алгоритмы ее игнорируют. ндикатор остановки алгоритма  может принимать следующие значения: 1  получено решение, 0  число итераций превысило , -2  не найдена допустимая точка, -3  критерий не ограничен, -4  алгоритм столкнулся со значениями , -5  обе задачи не имеют допустимых решений, -7  направление поиска стало слишком малым при отсутствиипрогресса. льшая часть параметров оптимизации функции , устанавливаемых через , является общей для всех алгоритмов. то ,  (, , , (по умолчанию ,  (85 для большого алгоритма, 10   число переменных для симплекса и 10   (число переменных, число неравенств  число границ для -,  (1-8 длябольшого алгоритма, 1-6 для симплекса, в - не используется. араметр  присущ только средним алгоритмам, его значение  соответствует симплекс-методу,  (по умолчанию  -. 144 ример 23. айти минимум функции(  811  1412  613  1821  1022  2623  2231  1632   1833  1441  2442  4043 при условиях11  12  13  70, 21  22  23  84, 31  32  33  40, 41  42  43  150, 11  21  31  41  56, 12  22  32  42  74, 13  23  33  43  100,   0. начала подготовим входные аргументы, описывающие задачу: 8; 14; 6; 18; 10; 26; 22; 16; 18; 14; 24; 40; 1 1 1 0 0 0 0 0 0 0 0 0  0 0 0 1 1 1 0 0 0 0 0 0  0 0 0 0 0 0 1 1 1 0 0 0  0 0 0 0 0 0 0 0 0 1 1 1; 70; 84; 40; 150;  1 0 0 1 0 0 1 0 0 1 0 0  0 1 0 0 1 0 0 1 0 0 1 0  0 0 1 0 0 1 0 0 1 0 0 1; 56; 74; 100; (12,1; ; атем выберем алгоритм -: (, ; начальную точку 05(12,1 и вызовем функцию : ,,,,  (,,,,,,,0,  результате выполнения функции получили отчет:  .    0 145  0.0000  70.0000  0  74.0000  0.0000  0.0000  -0.0000  30.0000  56.0000  0  0.0000    2.4840003    1    : 11  : 2.1221-015 нарушение ограничений : -: -  :  число итераций внутреннего алгоритма  :  .    : 121   : 121   : 31   : 41  ак следует из отчета, решение получено за 11 итераций при допустимо малом нарушении ограничений. аскроем значения некоторых :  .    6.0000  16.0000  0  4.0000  0 146  8.0000  8.0000  6.0000  0  0  14.0000  22.0000  .    12.0000  0  0  0  .    -14.0000  -10.0000  -18.0000 ножители  имеют смысл двойственных переменных.  данном примере они показывают, что восемь переменных находятсяна нижней границе, первое неравенство также на границе, т.е. являетсяактивным в оптимальной точке, и все равенства активны. еличина говорит о значимости соответствующих ограничений. ешим эту же задачу симплекс-методом. ля этого в укажем явно симплекс-алгоритм и в  снимем задание начальной точки. огда имеем(, ,,; ,,,  (,,,,,,,,  .    0  0  70  0  74  0 147  0  0  30  56  0  0    2484    1    : 3  :  :   :   :  .  : 0 ак видим, симлекс-алгоритм нашел решение всего за три итерации, и при этом нарушений ограничений нет. ба алгоритма дали одинаковые решения. 148 7.  .  ункция  предназначена для решения задач целочисленного программирования с бинарными (булевыми переменными, представленных в форме       ,    , 10. лгоритм основан на хорошо известном методе ветвей и границ.  ходе решения строится бинарное дерево поиска, узлы которого соответствуют ослабленным (непрерывным задачам линейного программирования, в которых условие бинарности переменных заменено болееслабым 0    1. сли значение критерия очередной -задачи лучше уже достигнутого в целочисленном решении, называемого рекордом, и есть нецелые переменные, то происходит ветвление. а одной ветви ветвящаяпеременная равна 0, на другой  1. ыбор переменной для ветвлениязависит от значения параметра . сли оно равно, выбирается переменная, значение которой наиболееблизко к нулю или единице. огда же параметр равен (установлено по умолчанию, берется переменная со значением, наиболее близким к 0,5.  случаях, когда -задача узла: а неразрешима, б дает целочисленное решение, в имеет значение критерия не лучше рекорда, узелудаляется из дерева и осуществляется переход в другой узел. тратегия перехода зависит от установки параметра .ри значении  применяется стратегия поиска в глубину: если уузла есть один нерассмотренный непосредственный потомок, то выбирается его узел, иначе алгоритм переходит к узлу на один уровень выше и выбирает узел его непосредственного потомка. огда параметрравен  (установка по умолчанию, применяется стратегия лучшего узла: выбирается узел, имеющий лучшую нижнюю оценку. 149 ри получении целочисленного решения со значением критериялучше рекорда рекорд обновляется: ему присваивается значение критерия. ызов функции  производится в соответствии с синтаксисом:   (   (,,   (,,,,   (,,,,,0   (,,,,,0,   ( ,  (... ,,  (... ,,,  (.... сли начальная точка 0 окажется недопустимой, алгоритм возьмет в качестве нее свою точку по умолчанию. з всех остальных входных и выходных аргументов уточняющих пояснений требуют тольковыходы  и . ндикатор останова алгоритма можетиметь значения: 1  достигнута сходимость к решению , 0  число итераций превысило допустимое  (по умолчанию 100000  число переменных, -2  задача неразрешима (условия противоречивы, -4  число исследованных узлов превысило допустимое  (по умолчанию 1000  число переменных, -5  время поиска превысило допустимое  (по умолчанию 7200 с , -6  число итераций решателя -задачи в узле превысило допустимое  (по умолчанию 100  число переменных. труктура  включает поля, в которых содержится числоитераций, число просмотренных узлов, время работы алгоритма, имяалгоритма, стратегии ветвления и выбора узла, сообщение об останове. зменение значений параметров оптимизации может производиться с помощью функции . омимо упомянутых выше параметров функция  имеет еще такие параметры, как  и , а также:   интервал(число узлов, через который выводится отчет в режиме (по150 умолчанию 20,   конечная чувствительность (допустимость по целевой функции (1.0-3,   допустимое отклонениечисла от целого, в пределах которого число считается целым (1.0-8,   конечная чувствительность по целевой функции в алгоритме  (1.0-6. ассмотрим пример использования функции . ример 24. айти максимум функции(  231  412  183  254  305при условиях41  2  23  4  25  4, 71  82  63  15, 112  53  124  95  27, 10. начала запишем входные аргументы в требуемом формате: -23; -41; -18; -25; -30; 7 8 6 0 0; 0 11 5 12 9; 15; 27; 4 1 2 1 2; 4; ля получения решения обращаемся к функции : ,,,  (,,,, осле выполнения алгоритма получаем   0  0  1  0  1    -48  значение целевой функции с обратным знаком   1    : 25 151  : 27  : 1.6875  : - --  :     :     :  . тчет показывает, что решение найдено за 25 итераций алгоритмом ветвей и границ, основанным на решении -задач. ри этомпросмотрено 27 узлов, использованы стратегии ветвления и выбора узлов . 152 8.  .  адачи, в которых целевая функция является квадратичной, а всеограничения линейные, называют задачами квадратичного программирования (. ля их решения в   имеетсяфункция . адача  ставится в виде21    при условиях   ,    ,     , где   квадратная матрица (гессиан, остальные обозначения не требуют пояснений.  зависимости от размера задачи и свойств матриц функция применяет   или   алгоритм. ервый алгоритм предназначен для задач большой размерностипри наличии только ограничений на переменные или только ограничений-равенств. ри этом матрицы  и  должны быть разреженными, а линейные равенства независимыми (число равенств не можетбыть больше числа переменных. тот алгоритм установлен по умолчанию, но если задача не соответствует условиям его применимости, происходит автоматический переход на алгоритм  . лгоритм   построен по методу подпрастранства доверительной области ( - , описанному в предыдущих главах. апомним, что на каждой итерации решаетсяподзадача минимизации на выделенном подпространстве , в результате чего находится очередной шаг к строго допустимому решению задачи. пределение двумерного подпространства  требует решениябольшой положительно определенной линейной системы   . ешение этой системы находится методом предобусловленных сопряженных градиентов (. редобусловливатель ( для  это симметричная положительно определенная матрица  такая, что   2и -1 1  хорошо обусловленная матрица или матрица с153 кластеризованными собственными значениями. терации  выполняются на каждой итерации основного алгоритма (по умолчанию. торой способ решения линейной системы основан на прямой факторизации матрицы  ( . лгоритм   реализует метод активного набора (-, известного также как метод проекций. го описание приведено в предыдущих разделах. лгоритм состоит из двух этапов: на первом этапе находится допустимая начальная точка, на втором генерируется последовательность допустимых точек, сходящаяся к решению. ля решения квадратичной задачи с параметрами, установленными по умолчанию, достаточно ввести данные задачи и вызвать функцию  в соответствующем задаче синтаксисе:   (,,,   (,,,,,   (,,,,,,,   (,,,,,,,,0   (,,,,,,,,0,   ( ,  (... ,,  (... ,,,  (... ,,,,  (... десь обозначения имеют тот же смысл, что и в ранее рассмотренных функциях. аметим только, что ели границы противоречивы, то вкачестве решения х выводится х0 (компонентам, нарушающим границу, придается допустимое значение, а в качестве   . наченияиндикатора  указывают на причину останова алгоритма: 1  получена сходимость к решению х; 3  изменение значения целевой функции стало меньше допустимого; 4  найден локальный минимум; 0  число итераций превысило допустимое ; -2  условия противоречивы; -3  критерий неограничен; -4  в текущем направлении поиска нельзя улучшить функцию; -7  модуль направления поиска стал слишком мал. 154 ыходная структура  содержит поля: число итераций, название алгоритма, общее число итераций  в  (, меру оптимальности 1-го порядка для  (, величину нарушения ограничений в  (. а процесс минимизации можно влиять через параметры функции. зменение значений параметров производится, как и раньше, с помощью функции . асть парметров являются общими для обоих алгоритмов.  ним относятся , ,   и . араметры, присущие только алгоритму , приведены в прил. 8. араметром  можноограничивать число итераций  на одну итерацию основного алгоритма. меньшение этого параметра приводит к увеличению числа основных итераций. становка параметра  в означает замену  прямой факторизацией олеску. ример 25. айти минимум функции12 22 1 2 12        (  10 12 2 4 4   при условиях1  32  12, 1  2  3, 1  2  2, 1  0, 2  0. ля решения задачи составляем программу, в которой задаем начальную точку в допустимой области, заносим данные задачи в виде , , ,  и обращаемся к функции  с указанием в ней нулевыхнижних границ.  04 1;4 -4;-4 8;10;-12;1 3;-1 -1;-1 1;12;-3;2; ,,,  (,,,,,,0 0,,0  результате выполнения этой программы получаем: -        ,  -  .  .   155  0.7000  2.3000    -4.9000    1    : 2  : -4.4409-016  : -: -  :   :   :  .  начальном сообщении поясняется, что постановка задачи не соответствует принятой для алгоритма   и потому он заменен на алгоритм  . тим алгоритмом решение найдено задве итерации при практически точном соблюдении ограничений(см. . сли не задавать начальную точку, то результат не изменится.  этом случае алгоритм сам определяет начальнуюдопустимую точку. еперь возьмем начальную точку вне допустимой области:  00 4;4 -4;-4 8;10;-12;1 3;-1 -1;-1 1;12;-3;2; ,,,  (,,,,,,0 0,,0  .    0.7000  2.3000    -4.9000    1    : 3  : -4.4409-016  : -: -  :   :   :  . 156 ак видно, получено такое же решение, но за три итерации. чевидно, первая (дополнительная итерация потребовалась для вхождения в допустимую область. бе начальные точки и точка найденного минимума (обозначена  показаны на рис. 40 на фоне линий уровня. ак и следовало ожидать, оптимум лежит на границе. ис. 40. ешение квадратичной задачи из примера 25 тобы увидеть работу алгоритма  , изменим условиярассмотренной задачи, удалив линейные неравенства и добавив верхние ограничения на переменные:  04 1;4 -4;-4 8;10;-12; ,,,  (,,,,,,0 0,5 5,0    0.0000  1.5000    -9.0000    3    : 8  : 0 157  : -:  -  : 1.5419-013  : 7  : 187  ешение снова получено на границе допустимой области. а поиск минимума затрачено восемь основных итераций и семь итераций. лгоритм  - оказался очень трудоемким. ействительно, если в этом же примере выключить  , то получим  (,;04 1;4 -4;-4 8;10;-12; ,,,  (,,,,,,0 0,5 5,0,    0  1.5000    -9    1    : 2  : 0  : -: -  :   :   :  . ак видим, здесь такое же решение получено за две итерации. оэтому рекомендуется начинать решение и больших задач с использования алгоритмов  . абораторная работа  7 ешение задач математического программированияадания: 1. знакомиться с функциями ,  и  иметодами, используемыми в них. яснить назначение основных параметров функций. 158 2. вумя методами   решить задачу линейного программирования (  105011  174012  139513  64414  84021  132022   126023  52924  77031  144032  90033  41434  84041   138042  94543  62144  , 11  21  31  41  2, 12  22  32  42  1, 13  23  33  43  2, 14  24  34  44  1, 3511  6012  4513  2314  62, 3521  6022  4523  2324  90, 3531  6032  4533  2334  50, 3541  6042  4543  2344  120,   0. овторить решение из разных начальных точек. равнить результаты решения. 3. адачу из предыдущего пункта решить при условии бинарностивсех переменных. равнить показатели решений при различных стратегиях ветвления и перехода. овторить решение для нахождения максимума целевой функции. 4. лгоритмами   и   решить задачуквадратичного программирования 2221 2 3 1 2 3 12 13 23            (  3 5 10 8 2 5 6 2 ,        0,5  1  5, 0  2  5, 1  3  5. ыяснить, какую информацию дают значения . 5. ешить задачу квадратичного программирования из предыдущего пункта, добавив линейные неравенства21  32  3  15, 1  2  3  0,2. бъяснить значения . 159 9.     омимо функций, предназначенных для решения общих задачбезусловной оптимизации и математического программирования, пакет   включает функции для решения рядаспециальных задач, которые ставятся как оптимизационные.  частности, это задачи решения уравнений и задачи на методы наименьшихквадратов и аппроксимации (подбора кривых. оответствующиефункции будут рассмотрены без описания алгоритмов и несущественных деталей. 9.1. ахождение корней функции одной переменнойту задачу решает функция . ри этом полагается, чтофункция непрерывная и в точках корней пересекает ось , а пользователь может задать точку вблизи искомого корня или интервал, на концах которого функция имеет разные знаки. оиск осуществляется алгоритмом, использующим комбинацию методов деления отрезка пополам, секущих и обратной квадратичной интерполяции. интаксис вызова функции :   (,0   (,0,   ( ,  (... ,,  (... ,,,  (... ак и в предыдущих разделах, аргумент  задает функцию в виде имени -файла или анонимно. 0  точка, вблизи которой предполагается корень, или вектор с двумя элементами, задающими интервал. оследний всегда должен быть конечным. а корень х принимаетсязначение вблизи точки, где функция меняет знак. олько при1 найденная точка является корнем функции. труктура помимо общего числа итераций, числа вычислений функции иалгоритма содержит число итераций для нахождения интервала, содержащего корень (. ункция  имеет параметры, позволяющие подключатьфункции вывода и графики (, , изменять уровень выводимой информации ( и допустимое значение по х160 (. роме того, при включении параметра  ( будет выдаваться ошибка, когда значение целевой функции окажетсякомплексным,  или . ример 26. 1. айти корень функции(  2    1. ешение при задании точки ,(.2-1,0.6    0.6180  это отношение золотого сечения   -1.1102-016 ешение при задании интервала ,(.2-1,0 1    0.6180    0 2. айти корень функции(  23  7   6. ешение ,(2.3-7-6,1 5    2.2047    -1.7764-015 9.2. ешение системы нелинейных уравненийадача определяется выражением(  0, где   вектор переменных; (  векторная нелинейная функция. аким образом, речь идет о нахождении корня системы нелинейных уравнений. ля решения такой задачи предназначена функция.  ней реализованы три алгоритма: - , -- и -. се они способны решать задачи большой размерности ( .   установлен по умолчанию, но он может использо-161 ваться только когда число уравнений равно числу неизвестных. ривыборе другого алгоритма его следует указать в параметре . интаксис обращения к функции :   (,0   (,0,   ( ,  (,0 ,,  (... ,,,  (... ,,,,  (.... ходной аргумент   это имя -файла, в котором вычисляется( и, возможно, кобиан. оследний представляет собой матрицу, строками которой являются градиенты (. кобиан также можетбыть выходным аргументом (в последнем варианте обращения. ндикатор останова  может принимать значения: 1  установлена сходимость к х; 2  изменение х меньше допустимой величины; 3  изменение невязки меньше допустимой величины; 4  величина направления поиска меньше заданной; 0  число итераций или вычислений функции превысило максимально допустимое; -1  останов по причине функции вывода; -2  алгоритм сходится к точке, не являющейся корнем; -3  радиус доверительной области стал слишком малым; -4  невозможно существенно уменьшить невязку в направлениитекущего поиска. труктура  содержит поля, стандартные длярассматриваемых алгоритмов. араметры функции , общие и индивидуальные для алгоритмов, приведены в прил. 9.  их помощью можно влиять на процессрешения. ри выборе алгоритма - можно такжеизменить его внутренний параметр , который по умолчанию равен0,01, указав его в значении  за именем алгоритма, например-,.003. ример 27. 1. ешить систему1 22 112 21 122 ,2 .              162 ерепишем эту систему в требуемой форме: 1 22 112 21 122 0,2 0.                оставим функцию для вычисления левых частей системы:    ( 2(1(2-(2-(-(1(-(2; (1-2(1(2-(-(2(-(1; адав начальную точку, запускаем решение: 01 1;,,(,0  .    0.5000 0.5000    1.0-009   общий множитель0.1164  -0.1164    1 езультаты показывают, что решение системы получено с высокойточностью (значения обеих функций практически равны нулю. 2. ешить систему, заданную в матричном виде:     0,5  6 2 . 1 4     начала записываем -файл, содержащий вычисляемую функцию:   2( -0.5-6 2;1 4; атем выбираем в качестве решателя алгоритм , задаем начальную точку 0 с нулевыми значениями элементов и запускаем программу: 0(2,2; (,-; ,,, (2,0,  .    -2.1914 -0.4513 163  -0.2257 -1.7401    1.0-010   0.1295 0.1672  0.0682 -0.0274    1   : 5 : 32 : 1.1077-007 :  : 7.6386-011 : - : 1685  ак видим, система имеет решение и получено оно за пять итераций. огрешность найденного решения ( пренебрежимо мала. сли система уравнений линейная    и число уравнений равночислу переменных, решение получить проще, используя оператор левого матричного деления , т.е. имеем   . та формула справедлива, так как в рассматриваемом случае  дает обратную матрицу 1. ример 28. ешить систему уравнений1 2312312 38  3 6,4 5 2 13,7 9 5.       ешение:  8 -3 1;4 5 -2;-7 1 9; 6;13;5;  разу получаем ответ:    1.3534  2.0686  1.3784 164 9.3. елинейная задача наименьших квадратовадача состоит в минимизации суммы квадратов функций    12 (  ( при условии     . ля решения этой задачи предназначена функция . сновные алгоритмы, используемые в ней: рефлексивный алгоритм доверительных областей (--  и алгоритм евенберга  арквардта (- . ервый алгоритм, установленный по умолчанию, применим, когда размерность  не меньше числа переменных, а второй алгоритм неприменим при наличии границ на переменные. ля обоих алгоритмов необходимо, чтобы функции ( были непрерывными. араметры этих алгоритмов рассматривались ранее. интаксис вызова функции :   (,0   (,0,,   (,0,,,   ( ,  (... ,,  (... ,,,  (... ,,,,  (... ,,,,,  ... (... ,,,,,,...   (... ольшинство входных и выходных аргументов функции имеюттот же смысл, что и в ранее рассмотренных функциях. аметим, чтопод  понимается функция, вычисляющая все (. овыми выходными аргументами являются  и . ервый из них  это значение ( в оптимальном решении, а   остатки, т.е. значения ( в оптимальном решении. 165 ример 29. айти минимум функции(  (6  12  (1  22  (2  12  (2  32. ля решения этой задачи записываем -функцию ( (16-(1; (2(1-2; (3(2-1; (4(2-3; и, задав начальную точку, вызываем функцию :  01 1;,,  (,0   .  найден локальный минимум   4 2    10  значение (   2 2 1 -1  значения (1, (2, (3, (4ример 30. айти минимум функции1 25212 11(  (3 5  .          ешение: 1. аписываем -файл 1( 1:5; 3(1-(2((1(1((2-5; 2. ызываем функцию  из выбранной начальной точки:  0-2 0;,,  (1,0   .  возможно, найден локальный минимум   0.3425 -4.5046    10.1099    2.3758 -0.0365 -1.3867 -1.2459 0.9946 166 9.4. адача аппроксимацииассматривается следующая задача: имеется множество данных, отражающих неизвестную зависимость, и необходимо подобратьфункцию (или функции, наиболее близкую к этим данным. бычноэта задача решается так: задают вид функции, а ее параметры подбираются методом наименьших квадратов (в этом случае говорят о задаче подгонки кривой. акой вариант решения реализует функция. ормулировка задачи: найти такие коэффициенты , при которыхвыражение2 ( (,         достигает минимума. десь  и   известные входные и наблюдаемые выходные данные, а   некоторая принятая функция с неизвестными коэффициентами . озможно также задание границ в виде     . лгоритмы, используемые в , такие же, какв функции . интаксис вызова функции :  (,0,,   (,0,,,,   (,0,,,,,   ( ,  (... ,,  (... ,,,  (... ,,,,  ... (... ,,,,,  ... (... ,,,,,,...   (... спользуемые здесь входные и выходные аргументы не требуютпояснений, так как уже встречались ранее. аметим только, что под понимается функция (, , а не минимизируемое выражение. 167 ример 31. олучены данные измерений входной и выходной величины черного ящика. начения на входе: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15; на выходе: 1,79, 3,22, 4,10, 4,83, 5,21, 5,25, 4,85, 4,50, 4,05, 3,31, 2,70, 2,00, 1,45, 0,75, 0,29. ребуется описать зависимость выхода отвхода в классе функций (  (  .       чевидно, что в такой постановке задача сводится к нахождениюнеизвестных коэффициентов функции ,  и . начала для вычисления значений заданной функции создаем -файл:  2(, (1((2.((3; где искомые коэффициенты обозначены как (1, (2 и (3 соответственно. атем исполняем программу:  05; 1; -0.5;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15; 1.79 3.22 4.10 4.83 5.21 5.25 4.85 4.50 4.05 3.31 2.70 2.00  1.45 0.75 0.29; ,  (3,0,,   .    9.8913  0.2016  -0.0975    0.0467 з отчета следует, что   9,8913,   0,2016 и   0,0975. начение  и рис. 41 показывают, что полученная функция0,0975 (  9,8913(0,2016       хорошо аппроксимирует представленные данные. 168 ис. 41. ппроксимация данных подходящей функцией9.5. еотрицательный линейный метод наименьших квадратовостановка задачи: 22     при условии   0. редполагается, что система недоопределена илипереопределена, т.е. число строк не равно числу переменных. ля решения этой задачи предназначена функция . ешение ищется с использованием базисных векторов и нахождениемассоциированных с ними элементов . а каждой итерации базисный вектор, которому соответствует наибольшее значение , заменяется небазисным. ешение завершается, когда   0. интаксис вызова :   (,   (,,   ( ,  (... ,,  (... ,,,  (... ,,,,  (... ,,,,,  ... (...169 мысл всех обозначений очевиден. лементы (  0, когда(  0, и равны нулю при (  0. ример 32. айти решение задачи неотрицательных наименьших квадратов стремя переменными и четырьмя равенствами при следующих  и : 5 3 2 1569 1 9 , . 483 410 5 7 11                       ведя исходные данные и обратившись к функции , получаем 5 -3 2;6 9 -1;4 8 3;10 5 -7; 15;9;4;11; ,  (,    1.6623  0  0.7264    51.0769 сли снять ограничение неотрицательности переменных, то решение можно получить с помощью оператора левого матричного деления . ля нашего примера имеем 5 -3 2;6 9 -1;4 8 3;10 5 -7; 15;9;4;11;  олучаем решение:    2.1397  -0.6322  0.8747 одсчитаем (-(-13.6183 (  символ транспонирования. ак видим, решение существенно улучшилось за счетвозможности более широкого выбора значений переменных. 170 9.6. инейная задача наименьших квадратовс ограничениямиассмотренная выше задача является частным случаем более общей задачи, модель которой имеет вид2 12 2     при условиях    ,     ,     .  такой постановке задача решается с помощью функции пакета. ри отсутствии равенств и неравенств и числе строк матрицы не меньше числа столбцов применяется алгоритм  , основанный на  - . тот алгоритм установлен по умолчанию. сли указанные условия не выполняются илиалгоритм   выключен (опция , решение ищется алгоритмом   как в функции . араметры функции  аналогичны ранее рассмотренным параметрам для такихалгоритмов. интаксис обращения к функции :   (,,,   (,,,,,   (,,,,,,,   (,,,,,,,,0   (,,,,,,,,0,   ( ,  (... ,,  (... ,,,  (... ,,,,  (... ,,,,,  ... (... ходные аргументы функции описывают задачу, а выходные аргументы здесь те же, что в функции . оложительные значения  говорят о нормальном завершении поиска решения. 171 ример 33. айти решение задачи наименьших квадратов с ограничениямипри следующих данных: 5 3 2 1569 1 9 , , 483 410 5 7 11                       1  0,52  33  9, 21  62  2,33  5,5, 0,5    2,   1, 2, 3. ля решения задачи записываем все входные аргументы и вызываем функцию :  5 -3 2;6 9 -1;4 8 3;10 5 -7;... 15;9;4;11; 1 0.5 3;-2 6 2.3;9;5.5;... -0.5(3,1;2(3.1;... ,,,,,  (,,,,,,,  .    2.0000  -0.5000  0.8095    15.4643   остатки по четырем равенствам (   -1.8810  -2.3095  2.4286  0.8333    1    : 3  : 0  : -: -  :  172  :   :  .  . 0 8.4524 0  . 5.2143 0 0  . 0 0 ак следует из полученного отчета, решение найдено за три основные итерации алгоритмом  : - без использования . начения  показывают, что решение лежит наодной нижней и одной верхней границе и внутри области, задаваемойлинейными неравенствами. абораторная работа  8 ешение уравнений и метод наименьших квадратовадания: 1. знакомиться с назначением и синтаксисом функций , , , ,  и . 2. айти все корни и стационарные точки функции   (   0,5 0,5   на интервале 0    3. 3. ешить систему 0,5  0,1 5 2 . 1 4      4. айти минимум функции1 240,5 212 120(  ( .            5. усть выход  некоторого объекта связан с входом  зависимостью         173 в диапазоне 0    6. адать ряд значений  (24 или 30 точек и призначениях параметров   0,1,   0,2,   2 получить соответствующий ряд .  этому ряду добавить помехи, используя случайную величину с равномерным распределением в диапазоне от 0,2 до 0,2 и нулевым математическим ожиданием, для чего использовать функцию. о данным выхода с помехами  и входа  восстановить значения параметров ,  и  двумя алгоритмами, сравнить результаты ипредставить их графически. 174   о 1. ьяконов ..  7.20062007: самоучитель.  .:  ресс, 2008. 2. ьяконов ..  6.5 17 56 в математике имоделировании.  .: -ресс, 2005. о методам оптимизации3. оки . ведение в методы оптимизации: пер. с англ.  .: аука, 1977. 4. ттетков .., алкин .., арубин .. етоды оптимизации: учебник для вузов  под ред. .. арубина.  2-е изд., стер.  .: зд-во  им. .. аумана, 2003. 5. азара ., етти . елинейное программирование. еория иалгоритмы: пер. с англ.  под ред. .. дина.  .: ир, 1982. 6. ладков .., урейчик .., урейчик .. енетические алгоритмы: учеб. пособие для вузов  под ред. .. урейчика.  2-еизд., испр. и доп.  .: изматлит, 2006. 7. ольдштейн .. сследование операций: многокритериальные задачи: конспект лекций.  ермь: зд-во ерм. гос. техн. ун-та, 1995. 8. иглявский .., илинскас .. етоды поиска глобальногоэкстремума.  .: аука, 1991. 9. арманов .. атематическое программирование: учеб. пособие для вузов.  6-е изд., испр.  .: изматлит, 2008. 10. орнеенко .. етоды оптимизации: учебник.  .: ысш. шк., 2007. 11. одиновский .., огин .. арето-оптимальные решениямногокритериальных задач.  .: аука, 1982. 12. еклейтис ., ейвиндран ., эгсдел . птимизация в технике: в 2 кн.: пер. с англ.  .: ир, 1986. 13. оболь .., есхи .., аныгин .. етоды оптимизации: практикум.  остов-н: еникс, 2009. 14. едунец .., ерников .. етоды оптимизации: учеб. пособие для вузов.  .: зд-во , 2009. 175  1араметры араметры, общие для   и  араметр писание начение поумолчанию адает уровень выводимой информации:  нет вывода,   толькоитоговый отчет,  по каждой итерации, -  детальный,  вывод только о несходимости,-, - равнение аналитического градиента с конечно-разностным: ,   иагностическая информация о целевойфункции: ,   аксимальное приращение переменныхпри конечно-разностном вычислении градиента0.1  инимальное приращение переменныхпри конечно-разностном вычислении градиента1-8  онтроль типа возвращаемого значенияцелевой функции: ,   спользование аналитического градиента: ,   конечно-разностный метод  ип алгоритма:    ,      аксимальное число вычислений функции 100  числопеременных176  аксимальное число итераций 400  мя пользовательской функции вывода,вызываемой на каждой итерации  мя функции вывода графики: , , , ,, функция пользователя ,  онечное допустимое значение функции и  1-6  ектор типовых значений . ля масштабирования при конечно-разностном способесе  1 араметры только для  араметр писание начение поумолчанию пособ вычисления конечной разностидля градиентов:  (сдвигомвперед,   етод выбора направления поиска в квазиньютоновском алгоритме: ,,  адание начальной матрицы (только приустановке  в : положительный скаляр (всеэлементы, положительный вектор (диагональная матрица со значениями вектора   ип начальной матрицы в квазиньютоновском методе: ,-, пользователя 177 араметры только для  араметр писание начение поумолчанию пособ вычисления гессиана:  аналитически,   конечными разностями  адает функцию, вычисляющую произведение матрицы ессе на вектор (приустановке  -  бразец разреженности гессиана, используемый для аппроксимации матрицы разреженными конечными разностями длябольшеразмерных задач. ри неизвестнойструктуре  устанавливаютна плотную матрицу с использованиемполных конечных разностейлотнаяматрица аксимальное число итераций методапредобусловленного сопряженного градиента ( исло переменных2 араметр . ри установке в  скорее используется прямая факторизация,чем иагональнаяпредобусловленность онечная допустимая величина для итерации  (в критерии окончания 0.1  2 араметры араметры, общие для всех алгоритмовараметр писание начение поумолчанию ыбор алгоритма: --, , -, 178 ,,,,, , , ,,, , ,,  о же, что для  (прил. 1 рил. 1    использовать аналитический градиент функций нелинейных ограничений, вычисление через конечные разности адает функцию графики: , , , , ,   опустимое нарушение ограничения 1-6  вычисление градиентов в параллель,   нет араметры для --араметр писание начение поумолчанию,  , ,, о же, что для   (прил. 1 рил. 1 араметры для -араметр писание начение поумолчанию аксимальное число -итераций 10числопеременных179  оэффициент в ограничении длины шагапоиска, так что общее смещение по  ограничивается (  ((.(  исло итераций, на которых граница, определяемая , будет активной1  опустимое нарушение ограничений вовнутренних итерациях 1-6араметры для -араметр писание начение поумолчаниюстановка  обеспечивает выполнение ограничений на каждой итерации,   требование снимается адает функцию вычисления гессиана, когда параметр  равен -   пособ вычисления гессиана: , -- (конечными разностями, ,, (оба  с ограничением начисло учитываемых прошедшихитераций,- (пофункции пользователя  правляет функцией пользователяпри установке  в   ачальное значение барьера 0.1  ачальный радиус доверительнойобластичислопеременных опустимое число внутренних итераций метода проектируемых сопряженных градиентов2  (числопеременныхминус числоравенств 180  сли значение цлевой функции становится меньше ,итерации останавливаются  задачанеограничена-120 становка в --приводит к нормализации всех ограничений и целевой функции,в   нормализация отключена-  ычисление шага итерации при- быстрее,чем при  (сопряженный градиент, но  может быть быстрее при больших задачах с плотнымгессианом тносительная допустимость длявнутренних итераций алгоритмапроекции сопряженного градиента0.01  бсолютная допустимость длявнутренних итераций 1-10 араметры для араметр писание начение поумолчанию ак же, как для -   3 араметры  и араметры, общие для  и араметр писание начение поумолчанию адает уровень выводимой информацииоб итерациях:   нет вывода,   только итоговый отчет,  по каждой глобальной итерации181  еличина неразличимости значений целевых функций1-6 еличина неразличимости точек по расстоянию между ними. ешения идентичны, если удовлетворяются одновременно и 1-6 аксимальное время выполнения в секундах  ыбор точек, используемых для запуска:   все стартовые точки,  только удовлетворяющие границам,-  удовлетворяющие границам и неравенствам. спользуется навторой стадии алгоритмаараметры только для араметр писание начение поумолчанию исло потенциально стартовых точек дляисследования (в дополнение к 0. лязапуска используются те из них, что проходят проверки1000  ля уменьшения радиуса бассейна используется коэффициент (1--0.2  ножитель для определения, находитсяли пробная точка в существующем бассейне 0.75  исло последовательных пробных точек. сли для них функция штрафа достигаетпорога штрафа, то порог увеличиваетсяпосредством ;если они принадлежат бассейну, тоуменьшается радиус этого бассейна посредством 20  спользуется для увеличения порогаштрафа0.2  исло стартовых точек на первой стадииалгоритма200 182 араметры только для  араметр писание начение поумолчанию пределяет способ вычислений в поике:   однопроцессорный,  распределение стартовых точек по многимпроцессорам 4 араметры  араметр писание начение поумолчанию ри включении ( сохраняется историяокружения и точки, близкие к нему, повторно не проверяются. ри стохастическойфункции  не рекомендуется  азмер памяти на историю 14  пределяет близость текущих точек к точкам истории, при непревышении которойточки не проверяются (если  установлен в  (2(-52  роверка точек окружения, всех ( илидо лучшей (  оиск точек окружения:  всех,  до лучшей  ровень вывода результатов: ,, ,   ачальный размер окружения 1.0  ачальное значение параметра штрафа 10  аксимальное число вычислений целевойфункции2000  числопеременных аксимальное число итераций 100  числопеременных аксимальный размер окружения   - ускорять, - не ускорять сходимость вблизи минимума  183  оэффициент сокращения окружения принеуспешной итерации0.5  оэффициент расширения окружения приуспешной итерации2.0  ращать образец до того, как точку объявить минимумом  ользователь определяет функцию, вызываемую на каждой итерации (  оэффициент изменения штрафа 100  адает функцию вывода графика:, ,,    пределяет число интервалов, через котороевызывается функция графики1  орядок опроса точек: , ,   ариант метода: 2, 1, 2,1, 2,12  втоматическое масштабирование переменных (,     дополнительным поиском:2, 1, 2, 1, 2, 1, , , ,  бщее время оптимизации, с   опустимость по границам 1-3  опустимость по ограничениям 1-6  опустимость по целевой функции 1-6  опустимость по размеру окружения 1-6  опустимость по переменной 1-6  аспараллеливать вычисления по точкам( или нет (   пределять, является ли функция векторной(  184  5 араметры  араметр писание начение поумолчанию адает функцию, определяющую, принятали новая точка в качестве текущей  адает функцию, используемую для генерации новых точек: собственная,,   ип переменной: ,    ровень вывода: , , ,    нтервал в итерациях между выводами 10  адает функцию, запускаемую автоматически в течение или конце итераций решателя: собственная, ,, ,,   адает интервал (если не  или, на котором вызывается : целое число, ,   адает начальную температуру 100  адает максимальное число вычисленийцелевой функции3000  числопеременных адает максимальное число итераций   елаемое минимальное значение целевойфункции-  адает функцию(и, получающую(ие данные итерации и возможно изменяющую(ие параметры процесса: собственная,    адает функцию(и графики, вызываемую(ые в течение итераций: собственная, ,  ,  , , ,   адает число итераций, через которое вызывается функция графики1 185  адает интервал, через который происходит переотжиг100  адает число итераций, по которому вычисляется среднее значение измененияфункции500  числопеременных адает функцию обновления графика температуры: собственная, , ,   адает предел времени работы алгоритма, с   адает допустимое значение функции 1-6  6 араметры   ( и  араметр писание начение поумолчанию адает функцию, создающую начальную популяцию: ,   адает функцию кроссовера: , , ,, ,   оля популяции следующего поколения, создаваемая кроссовером0.8  ровень вывода: , , ,  адает функцию, которая вычисляет мерурасстояния между особями в пространствепеременных (генотип или функции (фенотип: ,   исло элитных особей, е используется в2  начение фитнес-функции, при достижениикоторого останавливается алгоритм- 186  адает функцию, масштабирующую фитнесфункцию: ,, ,  пределяет максимальное число итераций 100  адает функцию, которая продолжает оптимизацию после окончания : собственная,, ,,  или , (при типе данных  ачальное значение параметра штрафа 10  адаваемая пользователем матрица начальной популяции или ее части  адаваемый пользователем вектор-столбецначальных меток фитнес, возможно частичный   аправление миграции (перемещения:,   оля особей в каждой подпопуляции, перемещаемая в другую подпопуляцию0.2  исло поколений между миграциями особеймежду подпопуляциями20  казывает функцию получения потомков мутацией: , ,    казывает функцию, вызываемую на каждойитерации:   оля особей, удерживаемых на первом фронте арето, в то время как решатель выбираетособи из более высоких фронтов0.35  оэффициент обновления штрафа 100  адает функции графики: , ,, ,, ,, ,,   исло поколений между вызовами функцийграфики1 187  атрица или вектор диапазона особей в начальной популяции0;1  азмер популяции, целое число или вектор 20  адает тип данных популяции: ,  (оба при отсутствииограничений,  пределяет функцию выбора родителей:,,,,  исло последовательных поколений, недающее улучшение целевой функции, послекоторого останавливается алгоритм50  ремя, за которое, если нет улучшения целевой функции, алгоритм останавливается, с   аксимально допустимое время работы , с   риемлемая величина нарушения нелинейных ограничений1-6  сли изменение целевой функции за  поколений меньше этой величины,алгоритм останавливается1-6  пределяет, вычислять ли фитнес-функциипопуляции в параллель: ,  пределяет вычисление фитнес-функции каквекторной величины: ,  7 араметры  и араметр писание начение поумолчанию равнивает вычисление производных поаналитическим записям и по конечноразностному способу: ,   оказывать или нет диагностическую информацию о функции: ,  188  аксимальное изменение переменных приконечно-разностном вычислении градиентов0.1  инимальное изменение переменных приконечно-разностном вычислении градиентов1-8  ровень вывода: ,,,(вывод только принесходимости,-, ,-  пособ вычисления конечной разности дляградиентов:  (сдвигом вперед,  оказывать или нет ошибку при неправильных значениях функций (комплексных,  или : ,   адает число целевых функций, по которым требуется, чтобы они равнялись целевым значениям (только для 0  исло функций (, по которым для минимизации берется максимальная абсолютная величина (только для  0 ,  х включение ( означает, что градиенты целевых функций и нелинейных ограничений даются пользователем в файлах  аксимально допустимое число вычислений функции100  числопеременных аксимально допустимое число итераций 400  аксимально допустимое число итераций-алгоритма10  числопеременных   использование функциикачества  ,  использование функциикачества   адает одну или более функций выводапользователя 189  адает функции графики: ,, ,,   оэффициент для ограничения величинысмещения по  в линейном поиске:(  ((.(.  исло итераций, на которых ограничениена ( должно быть активным1  опустимая конечная величина нарушенийограничений1-6  опустимая конечная величина нарушенийограничений в итерациях 1-6  опустимое конечное изменение значенияфункции1-6  опустимое конечное изменение по  1-6   применяет для шкалирования конечных разностей при вычисленииградиентадиничныйвектор с размером, равным числупеременных адает способ вычисления градиентов: (параллельный,  (нет  8 араметры араметр писание начение поумолчанию адает функцию вычисления произведения  аксимальное число итераций  исло переменных2пределяет метод решения большой системы: 0  ,   прямая факторизация0 190  опустимое отклонение целевой функции ри границах2.2204-14, при равенствах 1-6 онечная допустимость в  0.1  онечная допустимость по х 2.2204-14  иповые значения х для внутреннего масштабирования. ффективно при наличии неограниченных компонент х и 1се компоненты равны1  9 араметры бщие для всех алгоритмовараметр писание начение поумолчанию спользуемый алгоритм: -, -, - ,, ,,, , , ,, , ,  ак в предыдущих приложениях   адает функцию графики: , , , , ,   ычисление кобиана:  задано пользователем,  по конечным разностям191 олько для алгоритма --араметр писание начение поумолчанию адает функцию вычисления произведениякобиана на другую матрицу без явногоформирования кобиана (когда он структуризован   адает разреженный образец кобиана дляконечного дифференцирования, иначе используется плотная матрица, влекущаябольшие затраты    ак в предыдущих приложениях  олько для алгоритма -араметр писание начение поумолчанию начение  может улучшатьсходимость плохо масштабированной задачи192 чебное изданиеольдштейн ркадий еонидович    чебное пособиеедактор и корректор .. альцева одписано в печать 15.01.2015. ормат 7010016. сл. печ. л. 15,48. ираж 20 экз. аказ  32015.  здательствоермского национального исследовательскогополитехнического университета. дрес: 614990, г. ермь, омсомольский пр., 29, к. 113. ел. (342 219-80-33. 